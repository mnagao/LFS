<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<!-- revision 9727 -->

<sect1 id="ch-scripts-udev">
  <?dbhtml filename="udev.html"?>

  <!--<title>Device and Module Handling on an LFS System</title>-->
  <title>LFSシステムにおけるデバイスとモジュールの取り扱い</title>

  <indexterm zone="ch-scripts-udev">
    <primary sortas="a-Udev">Udev</primary>
    <secondary>usage</secondary>
  </indexterm>

  <para>In <xref linkend="chapter-building-system"/>, we installed the Udev
  package. Before we go into the details regarding how this works,
  a brief history of previous methods of handling devices is in
  order.</para>
  <para><xref linkend="chapter-building-system"/>において、Udevパッケージをインストールしました。
  Udevがどのように動作するかについての詳細に入る前に、デバイスの取り扱い方法の歴史を整理します。</para>

  <para>Linux systems in general traditionally use a static device creation
  method, whereby a great many device nodes are created under <filename
  class="directory">/dev</filename> (sometimes literally thousands of nodes),
  regardless of whether the corresponding hardware devices actually exist. This
  is typically done via a <command>MAKEDEV</command> script, which contains a
  number of calls to the <command>mknod</command> program with the relevant
  major and minor device numbers for every possible device that might exist in
  the world.</para>
  <para>Linuxシステムは一般に、伝統的に静的なデバイス作成手法を使用しています。
  そして、正しいハードウェアデバイスが存在しているかどうかに関わらず、とても多くのデバイスノードが<filename class="directory">/dev</filename>に作成されます(時には本当に千ものノードが)。
  これは通常、<command>MAKEDEV</command>スクリプトを通じて行われます。このスクリプトは、世界中に存在するデバイス各々について、関係のあるメジャー・マイナー番号を指定し、<command>mknod</command>プログラムを大量に実行します。
</para>

  <para>Using the Udev method, only those devices which are detected by the
  kernel get device nodes created for them. Because these device nodes will be
  created each time the system boots, they will be stored on a <systemitem
  class="filesystem">devtmpfs</systemitem> file system (a virtual file system
  that resides entirely in system memory). Device nodes do not require much
  space, so the memory that is used is negligible.</para>
  <para>Udev方式を用いることで、カーネルが認識したデバイスのみデバイスノードが作成されます。
  それらデバイスノードは、システムをブートする度に作成されますので、<systemitem class="filesystem">devtmpfs</systemitem>ファイルシステム上に保持されます(<systemitem class="filesystem">tmpfs</systemitem>は仮想ファイルシステムで、完全にシステムメモリに常駐します)。
  デバイスノードは多くのスペースを必要としませんので、消費するメモリ量は無視しても構いません。</para>

  <sect2>
    <!--<title>History</title>-->
    <title>歴史</title>

    <para>In February 2000, a new filesystem called <systemitem
    class="filesystem">devfs</systemitem> was merged into the 2.3.46 kernel
    and was made available during the 2.4 series of stable kernels. Although
    it was present in the kernel source itself, this method of creating devices
    dynamically never received overwhelming support from the core kernel
    developers.</para>
    <para>2000年2月に、<systemitem class="filesystem">devfs</systemitem>と呼ばれる新しいファイルシステムが、カーネル2.3.46にマージされ、安定版カーネルである2.4系で利用可能となっています。
    デバイスの作成を動的に行うこの手法は、今もカーネルソースに存在していますが、中心的なカーネル開発者からの圧倒的な支持は得られませんでした。</para>

    <para>The main problem with the approach adopted by <systemitem
    class="filesystem">devfs</systemitem> was the way it handled device
    detection, creation, and naming. The latter issue, that of device node
    naming, was perhaps the most critical. It is generally accepted that if
    device names are allowed to be configurable, then the device naming policy
    should be up to a system administrator, not imposed on them by any
    particular developer(s). The <systemitem
    class="filesystem">devfs</systemitem> file system also suffers from race
    conditions that are inherent in its design and cannot be fixed without a
    substantial revision to the kernel. It was marked as deprecated for a long
    period &ndash; due to a lack of maintenance &ndash; and was finally removed
    from the kernel in June, 2006.</para>
    <para><systemitem class="filesystem">devfs</systemitem>が採用したアプローチの主な問題は、デバイスの検出・作成・命名の方法にあります。
    デバイスノードの命名の問題は、多分最も重大です。
    もし、デバイス名が設定可能であれば一般に受け入れられます。デバイスの命名規則はシステム管理者に委ねられるべきで、特定の開発者によって押し付けられるものではありません。
    <systemitem class="filesystem">devfs</systemitem>ファイルシステムはまた、自身が持つ競合の状況に問題を抱えており、この問題を解決するには、カーネルに対して大きな修正が必要です。
    このようなこともあり、長い間、<systemitem class="filesystem">devfs</systemitem>は、廃止予定とされてきました(メンテナンスが行われなくなったため)。そして、ついに2006年6月、カーネルから削除されました。</para>

    <para>With the development of the unstable 2.5 kernel tree, later released
    as the 2.6 series of stable kernels, a new virtual filesystem called
    <systemitem class="filesystem">sysfs</systemitem> came to be. The job of
    <systemitem class="filesystem">sysfs</systemitem> is to export a view of
    the system's hardware configuration to userspace processes. With this
    userspace-visible representation, the possibility of seeing a userspace
    replacement for <systemitem class="filesystem">devfs</systemitem> became
    much more realistic.</para>
    <para>開発系の2.5カーネルツリー、後に安定版カーネルとしてリリースされた2.6の開発において、<systemitem class="filesystem">sysfs</systemitem>と呼ばれる新しい仮想ファイルシステムが登場しました。
    <systemitem class="filesystem">sysfs</systemitem>の仕事は、システムのハードウェア情報をユーザスペースのプロセスに公開することです。
    このユーザスペースから見ることが出来るハードウェアの情報によって、ユーザスペースにおける<systemitem class="filesystem">devfs</systemitem>の置き換えの可能性が、より現時的なものとなりました。</para>
  </sect2>

  <sect2>
    <!--<title>Udev Implementation</title>-->
    <title>Udevの実装</title>

    <sect3>
      <!--<title>Sysfs</title>-->
      <title>Sysfs</title>

      <para>The <systemitem class="filesystem">sysfs</systemitem> filesystem was
      mentioned briefly above. One may wonder how <systemitem
      class="filesystem">sysfs</systemitem> knows about the devices present on
      a system and what device numbers should be used for them. Drivers that
      have been compiled into the kernel directly register their objects with
      <systemitem class="filesystem">sysfs</systemitem> as they are detected by
      the kernel. For drivers compiled as modules, this registration will happen
      when the module is loaded. Once the <systemitem
      class="filesystem">sysfs</systemitem> filesystem is mounted (on <filename
      class="directory">/sys</filename>), data which the built-in drivers
      registered with <systemitem class="filesystem">sysfs</systemitem> are
      available to userspace processes and to <command>udevd</command> for
      processing (including modifications to device nodes).</para>
      <para><systemitem class="filesystem">sysfs</systemitem>ファイルシステムは上で簡単に触れました。
      <systemitem class="filesystem">sysfs</systemitem>が、どのようにしてシステムにデバイスが存在していることを知るのか、また、それらデバイスについてどのデバイス番号を使用すべきかを不思議に思うでしょう。
      コンパイルされカーネルに組み込まれたドライバが、カーネルによって認識されたかのように、オブジェクトをダイレクトに<systemitem class="filesystem">sysfs</systemitem>に登録します。
      モジュールとしてコンパイルされたドライバによって、<systemitem class="filesystem">sysfs</systemitem>への登録は、モジュールがロードされた時に行われます。
      一度<systemitem class="filesystem">sysfs</systemitem>ファイルシステムがマウントされたら(<filename class="directory">/sys</filename>に)、カーネルに組み込まれたドライバが<systemitem class="filesystem">sysfs</systemitem>に登録したデータは、ユーザスペースのプロセスと<command>udevd</command>が(デバイスノードの変更も含め)処理をするために利用可能となります。
      </para>
    </sect3>

    <sect3>
      <!--<title>Udev Bootscripts</title>-->
      <title>Udev ブートスクリプト</title>

      <para>The <command>/etc/rc.d/init.d/udev</command> initscript takes care
      of creating device nodes when Linux is booted. The script unsets the
      uevent handler from the default of <command>/sbin/hotplug</command>.
      This is done because the kernel no longer needs to call out to an
      external binary.  Instead <command>udevd</command> will listen on a
      netlink socket for uevents that the kernel raises. Next, the bootscript
      copies any static device nodes that exist in <filename
      class="directory">/lib/udev/devices</filename> to <filename
      class="directory">/dev</filename>. This is necessary because some
      devices, directories, and symlinks are needed before the dynamic device
      handling processes are available during the early stages of booting a
      system, or are required by <command>udevd</command> itself.  Creating
      static device nodes in <filename
      class="directory">/lib/udev/devices</filename> also provides an easy
      workaround for devices that are not supported by the dynamic device
      handling infrastructure. The bootscript then starts the Udev daemon,
      <command>udevd</command>, which will act on any uevents it receives.
      Finally, the bootscript forces the kernel to replay uevents for any
      devices that have already been registered and then waits for
      <command>udevd</command> to handle them.</para>
      <para><command>/etc/rc.d/init.d/udev</command>起動スクリプトは、ブート時にデバイスノード作成の管理を行います。
      そのスクリプトは、<command>/sbin/hotplug</command>からueventハンドラを取り外します。
      カーネルはもう外部バイナリを呼び出す必要がなくなったために、この動作が行われます。
      代わりに、 <command>udevd</command>は、カーネルが発生させるueventをnetlinkソケット上で見張ります。
      次に、ブートスクリプトは<filename class="directory">/lib/udev/devices</filename>に存在する静的なデバイスノードを<filename class="directory">/dev</filename>にコピーします。
      これは必要な動作です。なぜなら、ブートの初期の段階で動的なデバイス管理が行われる前に、いくつかのデバイス・ディレクトリ・シンボリックリンクが必要となるからです。つまり、<command>udevd</command>自身がそれらを必要としているのです。
      <filename class="directory">/lib/udev/devices</filename>に静的なデバイスノードを作成することは、動的なデバイス管理機能でサポートされないようなデバイスのための、簡単な回避方法となります。
      ブートスクリプトはそれからUdevデーモンを起動します。
      <command>udevd</command>は受信するueventに従って動作を行います。
      最後に、ブートスクリプトはカーネルに対して、すでに登録されているデバイスにueventを再び発生させ、<command>udevd</command>がそれらueventを処理するのを待ちます。
</para>

      <para>The <command>/etc/rc.d/init.d/udev_retry</command> initscript takes 
      care of re-triggering events for subsystems whose rules may rely on 
      filesystems that are not mounted until the <command>mountfs</command> 
      script is run (in particular, /usr and /var may cause this).  This script 
      runs after the <command>mountfs</command> script, so those rules (if 
      re-triggered) should succeed the second time around.  It is configured 
      from the <filename>/etc/sysconfig/udev_retry</filename> file; any words 
      in this file other than comments are considered subsystem names to 
      trigger at retry time.  (To find the subsystem of a device, use 
      <command>udevadm info --attribute-walk</command>.)</para>
      <para><command>mountfs</command>スクリプトが実行されるまでマウントされないファイルシステム(特に、/usr と /varがこれに該当)に依存するサブシステムのために、<command>/etc/rc.d/init.d/udev_retry</command>スクリプトは、再トリガーイベントを処理します。
      それらルールは(再トリガーされれば)2回目あたりで成功するはずなので、<command>udev_retry</command>スクリプトは<command>mountfs</command>スクリプトの後に実行します。
      これら設定は<filename>/etc/sysconfig/udev_retry</filename>ファイルで行います。
      このファイルの中身で、コメント以外の単語はサブシステムの名前として認識され、リトライ時に起動されます。
      (デバイスのサブシステムを確認するには、<command>udevadm info --attribute-walk</command>コマンドを使用します)
      </para>

    </sect3>

    <sect3>
      <!--<title>Device Node Creation</title>-->
      <title>デバイスノードの作成</title>
      <para>As of Udev-&udev-version;, <command>udevd</command> no longer
      creates device files in <filename class="directory">/dev</filename>.
      Instead, this must be handled in the kernel, by the <systemitem
      class="filesystem">devtmpfs</systemitem> filesystem.  Any driver that
      wishes to register a device node will go through <systemitem
      class="filesystem">devtmpfs</systemitem> (via the driver core) to do it.
      When a <systemitem class="filesystem">devtmpfs</systemitem> instance is
      mounted on <filename class="directory">/dev</filename>, the device node
      will initially be created with a fixed name, permissions, and owner.</para>
      <para>Udev-&udev-version;から、<command>udevd</command>は<filename class="directory">/dev</filename>にデバイスを作成しなくなりました。
      代わりに、<systemitem class="filesystem">devtmpfs</systemitem>ファイルシステムによって、カーネル内でハンドリングされます。
      デバイスノードを登録するどのドライバも、<systemitem class="filesystem">devtmpfs</systemitem>を経由することになります(ドライバのコアを経由して)。
      <systemitem class="filesystem">devtmpfs</systemitem>インスタンスが<filename class="directory">/dev</filename>にマウントされたら、デバイスノードは固定された名称、パーミッション、所有者で最初に作成されます。</para>

      <para>A short time later, the kernel will send a uevent to <command>
      udevd</command>.  Based on the rules specified in the files within the
      <filename class="directory">/etc/udev/rules.d</filename>, <filename
      class="directory">/lib/udev/rules.d</filename>, and <filename
      class="directory">/run/udev/rules.d</filename> directories, <command>
      udevd</command> will create additional symlinks to the device node,
      or change its permissions, owner, or group, or modify the internal
      <command>udevd</command> database entry for that object.</para>
      <para>短い時間の後、カーネルは<command>udevd</command>に対してueventを送信します。
      <filename class="directory">/etc/udev/rules.d</filename>、<filename class="directory">/lib/udev/rules.d</filename>、<filename class="directory">/run/udev/rules.d</filename>以下のファイルで指定されたルールに基づき、<command>udevd</command>はデバイスノードへの追加のシンボリックリンクを作成、またはパーミッション・所有者・グループ、またはそのオブジェクトの<command>udevd</command>データベースを変更します。</para>

      <para>The rules in these three directories are numbered in a similar
      fashion to the LFS-Bootscripts package, and all three directories are
      merged together. If <command>udevd</command> can't find a rule for the
      device it is creating, it will leave the permissions and ownership at
      whatever <systemitem class="filesystem">devtmpfs</systemitem> used
      initially.</para>
      <para>上記3つのディレクトリにあるルールは、LFS-Bootscriptsパッケージに似たスタイルで番号付けされています。
      また、3つのディレクトリは全てマージされて扱われます。
      もし<command>udevd</command>が、作成しようとしているデバイスのルールを見つけられない場合、<systemitem class="filesystem">devtmpfs</systemitem>が最初に設定したパーミッション・所有者のままになります。</para>
    </sect3>

    <sect3>
      <!--<title>Module Loading</title>-->
      <title>モジュールのローディング</title>

      <para>Device drivers compiled as modules may have aliases built into them.
      Aliases are visible in the output of the <command>modinfo</command>
      program and are usually related to the bus-specific identifiers of devices
      supported by a module. For example, the <emphasis>snd-fm801</emphasis>
      driver supports PCI devices with vendor ID 0x1319 and device ID 0x0801,
      and has an alias of <quote>pci:v00001319d00000801sv*sd*bc04sc01i*</quote>.
      For most devices, the bus driver exports the alias of the driver that
      would handle the device via <systemitem
      class="filesystem">sysfs</systemitem>. E.g., the
      <filename>/sys/bus/pci/devices/0000:00:0d.0/modalias</filename> file
      might contain the string
      <quote>pci:v00001319d00000801sv00001319sd00001319bc04sc01i00</quote>.
      The default rules provided with Udev will cause <command>udevd</command>
      to call out to <command>/sbin/modprobe</command> with the contents of the
      <envar>MODALIAS</envar> uevent environment variable (which should be the
      same as the contents of the <filename>modalias</filename> file in sysfs),
      thus loading all modules whose aliases match this string after wildcard
      expansion.</para>
      <para>モジュールとしてコンパイルされたデバイスドライバは、そのモジュールの中に別名を持っています。
      別名は<command>modinfo</command>プログラムの結果で確認することができ、通常はモジュールによってサポートされるデバイスのbus固有の識別子に関連があります。
      例えば、<emphasis>snd-fm801</emphasis>ドライバはvendor ID 0x1319、device ID 0x0801としてPCIデバイスをサポートします。
      そしてこれは、<quote>pci:v00001319d00000801sv*sd*bc04sc01i*</quote>という別名を持ちます。
      ほとんどのデバイスに対して、busドライバは<systemitem class="filesystem">sysfs</systemitem>経由でデバイスを管理出来るように、ドライバの別名を公開します。
      例えば、<filename>/sys/bus/pci/devices/0000:00:0d.0/modalias</filename>ファイルは文字列<quote>pci:v00001319d00000801sv00001319sd00001319bc04sc01i00</quote>を含んでいるでしょう。
      Udevがデフォルトで提供するルールによって、<command>udevd</command>がuevent環境変数<envar>MODALIAS</envar>の内容を使用して<command>/sbin/modprobe</command>を呼び出します(<envar>MODALIAS</envar>の内容は、sysfsの<filename>modalias</filename>ファイルの内容と同じであるべきです)。
      このようにしてワイルドカード適用後に、別名がこの文字列にマッチする全てのモジュールをロードします。
</para>

      <para>In this example, this means that, in addition to
      <emphasis>snd-fm801</emphasis>, the obsolete (and unwanted)
      <emphasis>forte</emphasis> driver will be loaded if it is
      available. See below for ways in which the loading of unwanted drivers can
      be prevented.</para>
      <para>このような仕組みのため、<emphasis>snd-fm801</emphasis>の例で補足すると、もし利用可能であれば、廃れた(不要な)<emphasis>forte</emphasis>ドライバがロードされてしまいます。
      不要なドライバのロードを防ぐ方法については以下を参照してください。
</para>

      <para>The kernel itself is also able to load modules for network
      protocols, filesystems and NLS support on demand.</para>
      <para>カーネル自身はまた、要求に応じてネットワークプロトコル、ファイルシステム、NLSサポートのモジュールをロードすることが出来ます。</para>

    </sect3>

    <sect3>
      <!--<title>Handling Hotpluggable/Dynamic Devices</title>-->
      <title>Hotplug/Dynamicデバイスの管理</title>

      <para>When you plug in a device, such as a Universal Serial Bus (USB) MP3
      player, the kernel recognizes that the device is now connected and
      generates a uevent. This uevent is then handled by
      <command>udevd</command> as described above.</para>
      <para>デバイスを追加した時(USB MP3プレイヤー等)、カーネルはデバイスが今接続されたことを認識し、ueventを生成します。
      このueventは上記の通り<command>udevd</command>によって処理されます。</para>

    </sect3>

  </sect2>

  <sect2>
    <!--<title>Problems with Loading Modules and Creating Devices</title>-->
    <title>モジュールのロードとデバイスの作成の問題</title>

    <para>There are a few possible problems when it comes to automatically
    creating device nodes.</para>
    <para>自動的にデバイスノードが作成される時に発生しうるいくつかの問題があります。</para>

    <sect3>
      <!--<title>A kernel module is not loaded automatically</title>-->
      <title>自動的にカーネルモジュールがロードされない</title>

      <para>Udev will only load a module if it has a bus-specific alias and the
      bus driver properly exports the necessary aliases to <systemitem
      class="filesystem">sysfs</systemitem>. In other cases, one should
      arrange module loading by other means. With Linux-&linux-version;, Udev is
      known to load properly-written drivers for INPUT, IDE, PCI, USB, SCSI,
      SERIO, and FireWire devices.</para>
      <para>モジュールがbus固有の別名を持ち、busドライバが必要な別名を<systemitem class="filesystem">sysfs</systemitem>に正しく公開した時のみ、Udevはモジュールをロードします。
      その他の場合、他の方法でモジュールのロードを行う必要があります。
      Linux-&linux-version;では、UdevはINPUT、IDE、PCI、USB、SCSI、SERIO、FireWireの各デバイスの正しく書かれたドライバをロードすることが知られています。
</para>

      <para>To determine if the device driver you require has the necessary
      support for Udev, run <command>modinfo</command> with the module name as
      the argument.  Now try locating the device directory under
      <filename class="directory">/sys/bus</filename> and check whether there is
      a <filename>modalias</filename> file there.</para>
      <para>あなたが必要とするデバイスドライバがUdevでサポートされているかどうか調べるには、引数にモジュールの名前を指定して<command>modinfo</command>を実行してください。
      そして<filename class="directory">/sys/bus</filename>以下のデバイスディレクトリの位置を探し、<filename>modalias</filename>ファイルが存在するかどうか確認してください。</para>

      <para>If the <filename>modalias</filename> file exists in <systemitem
      class="filesystem">sysfs</systemitem>, the driver supports the device and
      can talk to it directly, but doesn't have the alias, it is a bug in the
      driver. Load the driver without the help from Udev and expect the issue
      to be fixed later.</para>
      <para>もし<filename>modalias</filename>ファイルが<systemitem class="filesystem">sysfs</systemitem>に存在している場合、ドライバはデバイスをサポートし、そのデバイスとダイレクトにやり取りが出来ます。
      ですが、別名を持たない場合はドライバのバグです。
      その場合は、Udevなしでドライバをロードし、将来その問題が修正されることを期待するしかありません。</para>

      <para>If there is no <filename>modalias</filename> file in the relevant
      directory under <filename class="directory">/sys/bus</filename>, this
      means that the kernel developers have not yet added modalias support to
      this bus type. With Linux-&linux-version;, this is the case with ISA
      busses. Expect this issue to be fixed in later kernel versions.</para>
      <para>もし<filename class="directory">/sys/bus</filename>以下の関連するディレクトリに、<filename>modalias</filename>ファイルが存在しない場合は、カーネル開発者がこのbusタイプに対して、まだmolaliasのサポートを追加していないことを意味しています。
      Linux-&linux-version;では、ISAバスが該当します。
      この問題については、将来のカーネルバージョンで修正されることを期待してください。</para>

      <para>Udev is not intended to load <quote>wrapper</quote> drivers such as
      <emphasis>snd-pcm-oss</emphasis> and non-hardware drivers such as
      <emphasis>loop</emphasis> at all.</para>
      <para>Udevは<emphasis>snd-pcm-oss</emphasis>や、<emphasis>loop</emphasis>のようなハードウェアではないラッパードライバをロードすることを全く意図していません。</para>
    </sect3>

    <sect3>
      <!--<title>A kernel module is not loaded automatically, and Udev is not
      intended to load it</title>-->
      <title>カーネルモジュールが自動的にロードされないし、Udevがそのモジュールをロードしようとしない</title>

      <para>If the <quote>wrapper</quote> module only enhances the functionality
      provided by some other module (e.g., <emphasis>snd-pcm-oss</emphasis>
      enhances the functionality of <emphasis>snd-pcm</emphasis> by making the
      sound cards available to OSS applications), configure
      <command>modprobe</command> to load the wrapper after Udev loads the
      wrapped module. To do this, add a <quote>softdep</quote> line in any
      <filename>/etc/modprobe.d/<replaceable>&lt;filename&gt;</replaceable>.conf</filename>
      file. For example:</para>
      <para>もし<quote>wrapper</quote>モジュールが、他のモジュールが提供する機能を強化するだけであれば(例：<emphasis>snd-pcm-oss</emphasis>は、OSSアプリケーションに対してサウンドカードを利用可能にすることによって、<emphasis>snd-pcm</emphasis>の機能を強化します)、Udevがwrapされるモジュールをロードした後に、wrapperモジュールをロードするように、<command>modprobe</command>を設定してください。
      これを実施するには、<filename>/etc/modprobe.d/<replaceable>&lt;filename&gt;</replaceable>.conf</filename>に<quote>softdep</quote>の行を追加してください。
      例：</para>

<screen role="nodump"><literal>softdep snd-pcm post: snd-pcm-oss</literal></screen>

      <para>Note that the <quote>softdep</quote> command also allows 
      <literal>pre:</literal> dependencies, or a mixture of both 
      <literal>pre:</literal> and <literal>post:</literal>.  See the 
      <filename>modprobe.d(5)</filename> manual page for more information 
      on <quote>softdep</quote> syntax and capabilities.</para>
      <para><quote>softdep</quote>コマンドは、<literal>pre:</literal>依存関係、または<literal>pre:</literal>と<literal>post:</literal>の両方の混合が可能です。
      <quote>softdep</quote>の実行方法と機能についての情報は、<filename>modprobe.d(5)</filename>のマニュアルページを参照してください。</para>

      <para>If the module in question is not a wrapper and is useful by itself,
      configure the <command>modules</command> bootscript to load this
      module on system boot. To do this, add the module name to the
      <filename>/etc/sysconfig/modules</filename> file on a separate line.
      This works for wrapper modules too, but is suboptimal in that case.</para>
      <para>質問のモジュールがwrapperではなくそのモジュール自身が有用なものであれば、ブート時にこのモジュールをロードするために、ブートスクリプト<command>modules</command>を設定してください。
      これを行うには、モジュール名を<filename>/etc/sysconfig/modules</filename>ファイルに行を分けて追加してください。
      これはwrapperモジュールに対してもうまく動作しますが、ベストな方法ではありません。</para>
    </sect3>

    <sect3>
      <!--<title>Udev loads some unwanted module</title>-->
      <title>Udevが不必要なモジュールをロードする</title>

      <para>Either don't build the module, or blacklist it in a
      <filename>/etc/modprobe.d/blacklist.conf</filename>  file as done with the
      <emphasis>forte</emphasis> module in the example below:</para>
      <para>モジュールをビルドしないようにするか、以下の例の<emphasis>forte</emphasis>モジュールのように、<filename>/etc/modprobe.d/blacklist.conf</filename>にblacklistを登録してください：</para>

<screen role="nodump"><literal>blacklist forte</literal></screen>

      <para>Blacklisted modules can still be loaded manually with the
      explicit <command>modprobe</command> command.</para>
      <para>ブラックリストに指定したモジュールは、<command>modprobe</command>コマンドを使って手動でロードすることが出来ます。</para>

    </sect3>

    <sect3>
      <!--<title>Udev creates a device incorrectly, or makes a wrong symlink</title>-->
      <title>デバイスの作成がおかしい、または間違ったシンボリックリンクが作成される</title>

      <para>This usually happens if a rule unexpectedly matches a device. For
      example, a poorly-writen rule can match both a SCSI disk (as desired)
      and the corresponding SCSI generic device (incorrectly) by vendor.
      Find the offending rule and make it more specific, with the help of the
      <command>udevadm info</command> command.</para>
      <para>これは、ルールが予想外にデバイスとマッチするとよく起こります。
      例えば、不完全なルールはSCSIディスク(希望通り)と類似のSCSI genericデバイス(間違い)の両方にマッチしてしまいます。
      問題を起こすルールを見つけ、<command>udevadm info</command>コマンドの助けを借りて、より詳細にルールを指定してください。</para>
    </sect3>

    <sect3>
      <!--<title>Udev rule works unreliably</title>-->
      <title>ルールの動作が不安定</title>

      <para>This may be another manifestation of the previous problem. If not,
      and your rule uses <systemitem class="filesystem">sysfs</systemitem>
      attributes, it may be a kernel timing issue, to be fixed in later kernels.
      For now, you can work around it by creating a rule that waits for the used
      <systemitem class="filesystem">sysfs</systemitem> attribute and appending
      it to the <filename>/etc/udev/rules.d/10-wait_for_sysfs.rules</filename>
      file (create this file if it does not exist). Please notify the LFS
      Development list if you do so and it helps.</para>
      <para>これは、以前に取り上げた問題の別の現れ方です。
      もしそうではなくて、ルールが<systemitem class="filesystem">sysfs</systemitem>の属性を使用しているのであれば、カーネルのタイミングの問題で、将来のカーネルで修正されるべきです。
      今のところ、使用される<systemitem class="filesystem">sysfs</systemitem>の属性を待つルールを作成し、それを<filename>/etc/udev/rules.d/10-wait_for_sysfs.rules</filename>ファイルに追加することで、この問題に対処することが出来ます(もしファイルが存在しない場合は新規に作成してください)。
      もしこのような対処を行う場合は、LFS開発メーリングリストに知らせてください。そうすれば手助けします。
      </para>

    </sect3>

    <sect3>
      <!--<title>Udev does not create a device</title>-->
      <title>デバイスを作成しない</title>

      <para>Further text assumes that the driver is built statically into the
      kernel or already loaded as a module, and that you have already checked
      that Udev doesn't create a misnamed device.</para>
      <para>以降の文章は、ドライバが静的にビルドされカーネルに組み込まれているか、モジュールとしてすでにロードされていること、Udevが誤った名称でデバイスを作成していないことをチェック済みであることを前提としています。</para>

      <para>Udev has no information needed to create a device node if a kernel
      driver does not export its data to <systemitem
      class="filesystem">sysfs</systemitem>.
      This is most common with third party drivers from outside the kernel
      tree. Create a static device node in
      <filename>/lib/udev/devices</filename> with the appropriate major/minor
      numbers (see the file <filename>devices.txt</filename> inside the kernel
      documentation or the documentation provided by the third party driver
      vendor). The static device node will be copied to
      <filename class="directory">/dev</filename> by the
      <command>udev</command> bootscript.</para>
      <para>もしカーネルドライバが、自身が持つデータを<systemitem class="filesystem">sysfs</systemitem>にエクスポートしないのであれば、Udevはデバイスノードを作成するために必要な情報を持たないことになります。
      これはカーネルツリーの外側から、サードパーティドライバの範囲で、最もよくあることです。
      この問題に対処するには、適切なmajor/minor番号で<filename>/lib/udev/devices</filename>に静的なデバイスノードを作成してください(カーネルドキュメントの<filename>devices.txt</filename>またはサードパーティのベンダーが提供するドキュメントを参照してください)。
      静的なデバイスノードは、<command>udev</command>ブートスクリプトによって、<filename class="directory">/dev</filename>ディレクトリにコピーされます。</para>

    </sect3>

    <sect3>
      <!--<title>Device naming order changes randomly after rebooting</title>-->
      <title>リブート後にデバイスの命名規則順序が異なる</title>

      <para>This is due to the fact that Udev, by design, handles uevents and
      loads modules in parallel, and thus in an unpredictable order. This will
      never be <quote>fixed</quote>. You should not rely upon the kernel device
      names being stable. Instead, create your own rules that make symlinks with
      stable names based on some stable attributes of the device, such as a
      serial number or the output of various *_id utilities installed by Udev.
      See <xref linkend="ch-scripts-symlinks"/> and
      <xref linkend="ch-scripts-network"/> for examples.</para>
      <para>これは、Udevがueventの処理とモジュールのロードを意図的に並行で行っているためで、そのために予測できない順番で処理が行われてしまいます。
      これは決して<quote>修正</quote>されません。
      その代わりに、シリアル番号または固定の名称(Udevでインストールされた様々な*_idユーティリティの出力結果のような、不変のデバイス属性に基づいた固定の名称)で、シンボリックリンクを作る独自のルールを作成してください。
      例として<xref linkend="ch-scripts-symlinks"/>と<xref linkend="ch-scripts-network"/>を参照してください。</para>
    </sect3>

  </sect2>

  <sect2>
    <!--<title>Useful Reading</title>-->
    <title>便利な読み物</title>

    <para>Additional helpful documentation is available at the following
    sites:</para>
    <para>役立つ追加のドキュメントは以下のサイトで入手できます：</para>

    <itemizedlist>

      <listitem>
        <para>A Userspace Implementation of <systemitem class="filesystem">devfs</systemitem>
        <ulink url="http://www.kroah.com/linux/talks/ols_2003_udev_paper/Reprint-Kroah-Hartman-OLS2003.pdf"/></para>
        <para><systemitem class="filesystem">devfs</systemitem>のユーザスペースの実装
        <ulink url="http://www.kroah.com/linux/talks/ols_2003_udev_paper/Reprint-Kroah-Hartman-OLS2003.pdf"/></para>
      </listitem>

      <listitem>
        <para>The <systemitem class="filesystem">sysfs</systemitem> Filesystem
        <ulink url="http://www.kernel.org/pub/linux/kernel/people/mochel/doc/papers/ols-2005/mochel.pdf"/></para>
        <para><systemitem class="filesystem">sysfs</systemitem>ファイルシステム
        <ulink url="http://www.kernel.org/pub/linux/kernel/people/mochel/doc/papers/ols-2005/mochel.pdf"/></para>
      </listitem>

      <listitem> 
        <para>Pointers to further reading 
        <ulink url="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html"/> 
        </para>
        <para>さらなる情報へのポインタは<ulink url="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html"/>にあります。</para> 
      </listitem>

    </itemizedlist>

  </sect2>

</sect1>
