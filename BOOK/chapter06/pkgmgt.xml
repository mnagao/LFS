<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<!-- revision 9968 -->

<sect1 id="ch-system-pkgmgt">
  <?dbhtml filename="pkgmgt.html"?>

  <!--<title>Package Management</title>-->
  <title>パッケージ管理</title>

  <para>Package Management is an often requested addition to the LFS Book. A
  Package Manager allows tracking the installation of files making it easy to
  remove and upgrade packages. As well as the binary and library files, a
  package manager will handle the installation of configuration files.  Before
  you begin to wonder, NO&mdash;this section will not talk about nor recommend
  any particular package manager. What it provides is a roundup of the more
  popular techniques and how they work. The perfect package manager for you may
  be among these techniques or may be a combination of two or more of these
  techniques. This section briefly mentions issues that may arise when upgrading
  packages.</para>
  <para>パッケージ管理については、LFSブックへの追加要望がたびたびあります。
  パッケージマネージャによって、インストールされるファイルのトラッキングが可能となり、パッケージの削除やアップグレードが簡単になります。
  バイナリとライブラリファイルと同様に、パッケージマネージャは設定ファイルも取り扱います。
  あなたがあれこれと思いを巡らす前に言いますが、このセクションでは特定のパッケージ管理ツールについて述べたり、推奨することはしません。
  ここでは、よりよく知られている手法とそれらがどのように機能するかについて紹介します。
  あなたにとって完璧なパッケージ管理というものは、それら手法の全てもしくは2つ以上の手法の組み合わせになるでしょう。
  このセクションでは、パッケージをアップグレードする際に生じる課題について、簡単に述べます。
</para>

  <para>Some reasons why no package manager is mentioned in LFS or BLFS
  include:</para>

  <para>LFSまたBLFSブックの中でパッケージ管理ツールについて触れられていないいくつかの理由は以下の通りです：</para>

  <itemizedlist>
    <listitem>
      <para>Dealing with package management takes the focus away from the goals
      of these books&mdash;teaching how a Linux system is built.</para>
      <para>パッケージ管理に対応することは、それらブックの目的 &mdash; Linuxシステムがどのように構築されるか &mdash; から外れてしまいます。
      </para>
    </listitem>

    <listitem>
      <para>There are multiple solutions for package management, each having
      its strengths and drawbacks.  Including one that satisfies all audiences
      is difficult.</para>
      <para>パッケージ管理には複数の方法があり、それぞれが利点・欠点を持っています。
      全ての読者を満足させるパッケージ管理の方法を一つに盛りこむことは困難です。
      </para>
    </listitem>
  </itemizedlist>

  <para>There are some hints written on the topic of package management. Visit
  the <ulink url="&hints-index;">Hints Project</ulink> and see if one of them
  fits your need.</para>

  <para>パッケージ管理について書かれている手引き(Hints)があります。
  <ulink url="&hints-index;">Hints Project</ulink>を訪れて、あなたの要求に沿うものであるか確認して見てください。
  </para>

  <sect2>
    <!--<title>Upgrade Issues</title>-->
    <title>アップグレードの問題</title>

    <para>A Package Manager makes it easy to upgrade to newer versions when they
    are released. Generally the instructions in the LFS and BLFS Book can be
    used to upgrade to the newer versions. Here are some points that you should
    be aware of when upgrading packages, especially on a running system.</para>

    <para>パッケージ管理ツールによって、新しいバージョンへのアップグレードが簡単になります。
    ほとんどの場合、LFSとBLFSの手順は、新しいバージョンへのアップグレードを行うために使用することが出来ます。
    パッケージをアップグレードする際(特に稼働中のシステムにおいて)に、いくつかの知っておくべきポイントは以下のとおりです。
    </para>

    <itemizedlist>
      <listitem>
        <para>If one of the toolchain packages (Glibc, GCC or Binutils) needs
        to be upgraded to a newer minor version, it is safer to rebuild LFS.
        Though you <emphasis>may</emphasis> be able to get by rebuilding all
        the packages in their dependency order, we do not recommend it. For
        example, if glibc-2.2.x needs to be updated to glibc-2.3.x, it is safer
        to rebuild. For micro version updates, a simple reinstallation usually
        works, but is not guaranteed. For example, upgrading from glibc-2.3.4
        to glibc-2.3.5 will not usually cause any problems.</para>

        <para>toolchainのパッケージ(Glibc, GCC, Binutils)のいずれかをバージョンアップ(マイナーバージョンアップ)する必要がある場合は、LFSシステムを再構築したほうがより安全です。
        依存関係を考えて全てのパッケージをリビルドすることは可能<emphasis>かもしれませんが</emphasis>、それはお勧めできません。
        例えば、glibc-2.2.xをglibc-2.3.xにアップグレードする必要がある場合、全てをリビルドするほうが安全です。
        マイクロバージョンのアップグレードの場合、単にそのパッケージだけを再インストールするだけでうまくいくでしょう。
        例えば、glibc-2.3.4からglibc-2.3.5へのアップグレードは、通常、問題は起こらないと思われます。
        </para>

      </listitem>

      <listitem>
        <para>If a package containing a shared library is updated, and if the
        name of the library changes, then all the packages dynamically linked
        to the library need to be recompiled to link against the newer library.
        (Note that there is no correlation between the package version and the
        name of the library.) For example, consider a package foo-1.2.3 that
        installs a shared library with name
        <filename class='libraryfile'>libfoo.so.1</filename>. Say you upgrade
        the package to a newer version foo-1.2.4 that installs a shared library
        with name <filename class='libraryfile'>libfoo.so.2</filename>. In this
        case, all packages that are dynamically linked to
        <filename class='libraryfile'>libfoo.so.1</filename> need to be
        recompiled to link against
        <filename class='libraryfile'>libfoo.so.2</filename>. Note that you
        should not remove the previous libraries until the dependent packages
        are recompiled.</para>

        <para>共有ライブラリを含むパッケージをアップデートする場合、その共有ライブラリのファイル名が変わると、そのライブラリをリンクしている全てのパッケージは、新しいライブラリをリンクするように再コンパイルする必要があります。
        (パッケージのバージョンとライブラリのファイル名は関係がないことに留意してください。)
        例えば、<filename class='libraryfile'>libfoo.so.1</filename>という名前の共有ライブラリをインストールする、foo-1.2.3というパッケージがあったとします。
        仮に<filename class='libraryfile'>libfoo.so.2</filename>という名前の共有ライブラリをインストールする新しいバージョンfoo-1.2.4にアップグレードするとしましょう。
        このケースだと、<filename class='libraryfile'>libfoo.so.1</filename>に動的リンクされる全てのパッケージは、<filename class='libraryfile'>libfoo.so.2</filename>にリンクされるように再コンパイルする必要があります。
        このとき、共有ライブラリに依存するパッケージが再コンパイルされるまで、古い共有ライブラリを削除すべきではないことに注意してください。
        </para>
      </listitem>
    </itemizedlist>

  </sect2>

  <sect2>
    <!--<title>Package Management Techniques</title>-->
    <title>パッケージ管理の手法</title>

    <para>The following are some common package management techniques. Before
    making a decision on a package manager, do some research on the various
    techniques, particularly the drawbacks of the particular scheme.</para>

    <para>下記に挙げたものは、いくつかの一般的なパッケージ管理の手法です。
    パッケージ管理方法を決定する前に、各手法の調査を行います。特に、仕組みの欠点についてです。
    </para>

    <sect3>
      <!--<title>It is All in My Head!</title>-->
      <title>全ては頭の中に！</title>

      <para>Yes, this is a package management technique. Some folks do not find
      the need for a package manager because they know the packages intimately
      and know what files are installed by each package. Some users also do not
      need any package management because they plan on rebuilding the entire
      system when a package is changed.</para>

      <para>そう、これがパッケージ管理の手法の一つです。
      何人かの人々は、パッケージを深く知っており、それぞれのパッケージによって何のファイルがインストールされるか知っているので、パッケージ管理の必要性を見出せません。
      パッケージが変わったら、システム全体を再構築するつもりなので、パッケージ管理を必要としない人々もいます。
      </para>
    </sect3>

    <sect3>
      <!--<title>Install in Separate Directories</title>-->
      <title>個別のディレクトリへのインストール</title>

      <para>This is a simplistic package management that does not need any extra
      package to manage the installations. Each package is installed in a
      separate directory. For example, package foo-1.1 is installed in
      <filename class='directory'>/usr/pkg/foo-1.1</filename>
      and a symlink is made from <filename>/usr/pkg/foo</filename> to
      <filename class='directory'>/usr/pkg/foo-1.1</filename>. When installing
      a new version foo-1.2, it is installed in
      <filename class='directory'>/usr/pkg/foo-1.2</filename> and the previous
      symlink is replaced by a symlink to the new version.</para>

      <para>これは、インストールを管理するための追加のパッケージを必要としない、単純化したパッケージ管理方法です。
      それぞれのパッケージは個別のディレクトリにインストールされます。
      例えば、パッケージ foo-1.1は<filename class='directory'>/usr/pkg/foo-1.1</filename>にインストールして、<filename>/usr/pkg/foo</filename>から<filename class='directory'>/usr/pkg/foo-1.1</filename>へシンボリックリンクを張ります。
      新しいバージョンである foo-1.2をインストールするときは、<filename class='directory'>/usr/pkg/foo-1.2</filename>にインストールし、以前のシンボリックリンクは新しいバージョンへ置き換えます。
      </para>

      <para>Environment variables such as <envar>PATH</envar>,
      <envar>LD_LIBRARY_PATH</envar>, <envar>MANPATH</envar>,
      <envar>INFOPATH</envar> and <envar>CPPFLAGS</envar> need to be expanded to
      include <filename>/usr/pkg/foo</filename>. For more than a few packages,
      this scheme becomes unmanageable.</para>

      <para><envar>PATH</envar>、<envar>LD_LIBRARY_PATH</envar>、<envar>MANPATH</envar>、<envar>INFOPATH</envar>、<envar>CPPFLAGS</envar>のような環境変数に、<filename>/usr/pkg/foo</filename>を含める必要があります。
      パッケージの数が多くなると、この仕組みは管理が難しくなります。
      </para>
    </sect3>

    <sect3>
      <!--<title>Symlink Style Package Management</title>-->
      <title>シンボリックリンク方式のパッケージ管理</title>

      <para>This is a variation of the previous package management technique.
      Each package is installed similar to the previous scheme. But instead of
      making the symlink, each file is symlinked into the
      <filename class='directory'>/usr</filename> hierarchy. This removes the
      need to expand the environment variables. Though the symlinks can be
      created by the user to automate the creation, many package managers have
      been written using this approach. A few of the popular ones include Stow,
      Epkg, Graft, and Depot.</para>

      <para>これは、前述のパッケージ管理手法のバリエーションの一つです。
      それぞれのパッケージは、前述の仕組みと同じようにインストールされます。
      ただし、パッケージのディレクトリに対してシンボリックリンクを張る代わりに、各ファイルに対して<filename class='directory'>/usr</filename>の中でシンボリックリンクを張ります。
      この方法では環境変数への追加は必要なくなります。
      シンボリックリンクはユーザが作成しますが、この作成を自動化するために、多くのパッケージ管理ツールがこの手段を使用しています。
      それらパッケージ管理ツールでよく知られているものとして、Stow、Epkg、Graft、Depotがあります。
      </para>

      <para>The installation needs to be faked, so that the package thinks that
      it is installed in <filename class="directory">/usr</filename> though in
      reality it is installed in the
      <filename class="directory">/usr/pkg</filename> hierarchy. Installing in
      this manner is not usually a trivial task. For example, consider that you
      are installing a package libfoo-1.1. The following instructions may
      not install the package properly:</para>

      <para>パッケージは実際には<filename class="directory">/usr/pkg</filename>の階層にインストールされていますが、<filename class="directory">/usr</filename>にインストールされているようにするため、見せ掛けのインストールを行う必要があります。
      この方法でインストールを行うことは、ささいな作業ではありません。
      例えば、パッケージ libfoo-1.1をインストールしている状況を考えてください。
      以下の手順ではパッケージが正しくインストールされないかもしれません：
      </para>

<screen role="nodump"><userinput>./configure --prefix=/usr/pkg/libfoo/1.1
make
make install</userinput></screen>

      <para>The installation will work, but the dependent packages may not link
      to libfoo as you would expect. If you compile a package that links against
      libfoo, you may notice that it is linked to
      <filename class='libraryfile'>/usr/pkg/libfoo/1.1/lib/libfoo.so.1</filename>
      instead of <filename class='libraryfile'>/usr/lib/libfoo.so.1</filename>
      as you would expect. The correct approach is to use the
      <envar>DESTDIR</envar> strategy to fake installation of the package. This
      approach works as follows:</para>

      <para>インストールは行われますが、依存するパッケージはあなたが期待したとおりに、libfooにリンクされないかもしれません。
      libfooにリンクするパッケージをコンパイルする場合、あなたが期待する<filename class='libraryfile'>/usr/lib/libfoo.so.1</filename>の代わりに、<filename class='libraryfile'>/usr/pkg/libfoo/1.1/lib/libfoo.so.1</filename>にリンクされることに気づくかもしれません。
      正しいアプローチは、パッケージのインストールを見せかけるために<envar>DESTDIR</envar>の戦略を使うことです。
      このアプローチは次のように働きます：
      </para>

<screen role="nodump"><userinput>./configure --prefix=/usr
make
make DESTDIR=/usr/pkg/libfoo/1.1 install</userinput></screen>

      <para>Most packages support this approach, but there are some which do not.
      For the non-compliant packages, you may either need to manually install the
      package, or you may find that it is easier to install some problematic
      packages into <filename class='directory'>/opt</filename>.</para>

      <para>ほとんどのパッケージはこのアプローチをサポートしていますが、サポートしていないパッケージもいくつか存在します。
      非対応のパッケージ対しては、手作業でパッケージのインストールを行うか、問題のあるパッケージを<filename class='directory'>/opt</filename>にインストールするほうがより簡単であることが分かるでしょう。
      </para>
    </sect3>

    <sect3>
      <!--<title>Timestamp Based</title>-->
      <title>タイムスタンプによるパッケージ管理</title>

      <para>In this technique, a file is timestamped before the installation of
      the package. After the installation, a simple use of the
      <command>find</command> command with the appropriate options can generate
      a log of all the files installed after the timestamp file was created. A
      package manager written with this approach is install-log.</para>

      <para>この手法では、パッケージをインストールする前に、タイムスタンプファイルを作成します。
      インストール後、適切なオプションを付けた<command>find</command>コマンドを単純に使用することで、タイムスタンプファイル作成後にインストールされた全てのファイル一覧を作成することが出来ます。
      この手法を使ったパッケージ管理ツールとしては、install-logがあります。
      </para>

      <para>Though this scheme has the advantage of being simple, it has two
      drawbacks. If, during installation, the files are installed with any
      timestamp other than the current time, those files will not be tracked by
      the package manager. Also, this scheme can only be used when one package
      is installed at a time. The logs are not reliable if two packages are
      being installed on two different consoles.</para>

      <para>この方式はシンプルであるという利点がありますが、二つの欠点があります。
      もし、インストールの間に現在時刻以外のタイムスタンプでファイルがインストールされた場合、それらファイルはパッケージ管理ツールで記録を追うことは出来ません。
      また、この方式では、一度にひとつのパッケージをインストールするときのみ使用できます。
      もし、2つのパッケージが異なるコンソールからインストールされると、そのログは信頼性がありません。
      </para>
    </sect3>

    <sect3>
      <!--<title>Tracing Installation Scripts</title>-->
      <title>インストールスクリプトのトレース</title>

      <para>In this approach, the commands that the installation scripts perform
      are recorded.  There are two techniques that one can use:</para>
      <para>このアプローチでは、インストールスクリプトが実行するコマンドを記録します。
      これを実現するには、2つの方法があります：</para>

      <para>The <envar>LD_PRELOAD</envar> environment variable can be set to
      point to a library to be preloaded before installation.  During
      installation, this library tracks the packages that are being installed by
      attaching itself to various executables such as <command>cp</command>,
      <command>install</command>, <command>mv</command> and tracking the system
      calls that modify the filesystem. For this approach to work, all the
      executables need to be dynamically linked without the suid or sgid bit.
      Preloading the library may cause some unwanted side-effects during
      installation. Therefore, it is advised that one performs some tests to
      ensure that the package manager does not break anything and logs all the
      appropriate files.</para>

      <para>環境変数<envar>LD_PRELOAD</envar>には、インストールする前に、プリロードされるライブラリを指定することが出来ます。
      インストールの間、このライブラリは<command>cp</command>、<command>install</command>、<command>mv</command>のような様々な実行形式ファイルに自分自身をアタッチし、ファイルシステムを変更するシステムコールをトラッキングします。
      この仕組みを働かせるためには、全ての実行形式ファイルはsuid/sgidビットをオフにして動的にリンクされる必要があります。
      ライブラリをプリロードすることで、インストールの過程で望まない副作用を引き起こすかもしれません。
      そのために、パッケージ管理ツールが何も破壊しないことと、適切なファイル全てのログが記録されることを保証するため、テストを行うことをお勧めします。
      </para>

      <para>The second technique is to use <command>strace</command>, which 
      logs all system calls made during the execution of the installation 
      scripts.</para>
      <para>2つ目の方法は<command>strace</command>を使うやり方です。
      このコマンドは、インストールスクリプトの実行の間、全てのシステムコールのログを記録します。</para>
    </sect3>

    <sect3>
      <!--<title>Creating Package Archives</title>-->
      <title>パッケージアーカイブの作成</title>

      <para>In this scheme, the package installation is faked into a separate
      tree as described in the Symlink style package management. After the
      installation, a package archive is created using the installed files.
      This archive is then used to install the package either on the local
      machine or can even be used to install the package on other machines.</para>

      <para>この仕組みでは、シンボリックリンクスタイルのパッケージ管理で述べた通り、パッケージは個別のディレクトリツリーに見せかけでインストールされます。
      インストール後、パッケージアーカイブがインストールされたファイルにより作成されます。
      このアーカイブを使用して、ローカルマシンまたは別のマシンにインストールすることが出来ます。
      </para>

      <para>This approach is used by most of the package managers found in the
      commercial distributions. Examples of package managers that follow this
      approach are RPM (which, incidentally, is required by the <ulink
      url="http://www.linux-foundation.org/en/Specifications">Linux
      Standard Base Specification</ulink>), pkg-utils, Debian's apt, and
      Gentoo's Portage system.  A hint describing how to adopt this style of
      package management for LFS systems is located at <ulink
      url="&hints-root;fakeroot.txt"/>.</para>

      <para>このアプローチは、商用ディストリビューションで採用されているパッケージ管理ツールのほとんどで使用されています。
      このアプローチに沿ったパッケージ管理ツールの例としては、RPM(ちなみに、RPMは<ulink url="http://www.linux-foundation.org/en/Specifications">Linux Standard Base Specification</ulink>で必要とされています)、pkg-utils、Debianのapt, GentooのPortageシステムがあります。
      この方式のパッケージ管理をLFSシステムに導入する方法についてのヒントが、<ulink url="&hints-root;fakeroot.txt"/>にあります。
      </para>

      <para>Creation of package files that include dependency information is 
      complex and is beyond the scope of LFS.</para> 
      <para>依存情報を含むパッケージファイルを作成することは複雑な作業で、LFSの範囲を超えています。</para>

      <para>Slackware uses a <command>tar</command> based system for package  
      archives.  This system purposely does not handle package dependencies 
      as more complex package managers do.  For details of Slackware package 
      management, see <ulink 
      url="http://www.slackbook.org/html/package-management.html"/>.</para>
      <para>Slackwareは<command>tar</command>ベースのパッケージアーカイブを使用しています。
      Slackwareは、より複雑なパッケージマネージャーが取り扱っているようなパッケージの依存情報をわざと取り扱っていません。
      Slackwareのパッケージ管理の詳細は、<ulink
      url="http://www.slackbook.org/html/package-management.html"/>を参照してください。 </para>

    </sect3>

    <sect3>
      <!--<title>User Based Management</title>-->
      <title>ユーザベースの管理</title>

      <para>This scheme, unique to LFS, was devised by Matthias Benkmann, and is
      available from the <ulink url="&hints-index;">Hints Project</ulink>. In
      this scheme, each package is installed as a separate user into the
      standard locations. Files belonging to a package are easily identified by
      checking the user ID. The features and shortcomings of this approach are
      too complex to describe in this section. For the details please see the
      hint at <ulink url="&hints-root;more_control_and_pkg_man.txt"/>.</para>

      <para>LFSに特有のこの方式は、Matthias Benkmannによって考案され、<ulink url="&hints-index;">Hints Project</ulink>にて公開されています。
      この方式では、各パッケージは標準的な位置に個別のユーザでインストールされます。
      パッケージに属するファイルはユーザIDをチェックすることで簡単に識別されます。
      この方式の特徴と欠点は、複雑過ぎてこのセクションで説明することが出来ません。
      詳細については、<ulink url="&hints-root;more_control_and_pkg_man.txt"/>を確認してください。
      </para>
    </sect3>

  </sect2>

  <sect2> 
    <!--<title>Deploying LFS on Multiple Systems</title>-->
    <title>複数のシステムへのLFSの展開</title> 

    <para>One of the advantages of an LFS system is that there are no files that 
    depend on the position of files on a disk system.  Cloning an LFS build to 
    another computer with an architecture similar to the base system is as 
    simple as using <command>tar</command> on the LFS partition that contains 
    the root directory (about 250MB uncompressed for a base LFS build), copying 
    that file via network transfer or CD-ROM to the new system and expanding 
    it.  From that point, a few configuration files will have to be changed. 
    Configuration files that may need to be updated include:  
    <filename>/etc/hosts</filename>, 
    <filename>/etc/fstab</filename>, 
    <filename>/etc/passwd</filename>, 
    <filename>/etc/group</filename>, 
    <filename>/etc/shadow</filename>, 
    <filename>/etc/ld.so.conf</filename>,
    <filename>/etc/sysconfig/rc.site</filename>,
    <filename>/etc/sysconfig/network</filename>, and
    <filename>/etc/sysconfig/ifconfig.eth0</filename>.
    </para> 
    <para>LFSシステムの利点の一つに、ディスク上のファイルの位置に依存するファイルがないことが挙げられます。
    元となるシステムとアーキテクチャが似ている他のコンピュータにLFSシステムをクローンすることは、rootディレクトリ(ベースのLFSシステムでは約250MB)を含むLFSパーティション上で<command>tar</command>を使用し、そのアーカイブファイルをネットワーク経由またはCD-ROMで新しいシステムにコピーし、展開するだけという簡単さです。
    その後に、少数の設定ファイルを変更しなければなりません。
    変更する必要がありそうな設定ファイルは、次のとおりです：

    <filename>/etc/hosts</filename>, 
    <filename>/etc/fstab</filename>, 
    <filename>/etc/passwd</filename>, 
    <filename>/etc/group</filename>, 
    <filename>/etc/shadow</filename>, 
    <filename>/etc/ld.so.conf</filename>,
    <filename>/etc/sysconfig/rc.site</filename>,
    <filename>/etc/sysconfig/network</filename>, and
    <filename>/etc/sysconfig/ifconfig.eth0</filename>.
   </para>
 
    <para>A custom kernel may need to be built for the new system depending on 
    differences in system hardware and the original kernel 
    configuration.</para> 
    <para>クローン先のシステムで、ハードウェアとオリジナルのカーネル設定に食い違いがある場合は、カスタムカーネルのビルドが必要になるかもしれません。</para>
 
    <para>Finally the new system has to be made bootable via <xref 
    linkend="ch-bootable-grub"/>.</para>
    <para>最後に、新しいシステムは<xref linkend="ch-bootable-grub"/>に沿って、ブート可能にする必要があります。</para> 
  </sect2>

</sect1>
