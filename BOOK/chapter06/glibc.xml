<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<!-- revision 9977 -->
<!--          9969 -->
<!--          9967 -->
<!--          9966 -->
<!--          9965 -->
<!--          9964 -->
<!--          9963 -->
<!--          9962 -->
<!--          9956 -->
<!--          9952 -->
<!--          9950 -->
<!--          9945 -->
<!--          9944 -->
<!--          9930 -->
<!--          9922 -->
<!--          9843 -->
<!--          9790 -->
<!--          9787 -->
<!--          9771 -->
<!--          9758 -->

<sect1 id="ch-system-glibc" role="wrap">
  <?dbhtml filename="glibc.html"?>

  <sect1info condition="script">
    <productname>glibc</productname>
    <productnumber>&glibc-version;</productnumber>
    <address>&glibc-url;</address>
  </sect1info>

  <title>Glibc-&glibc-version;</title>

  <indexterm zone="ch-system-glibc">
    <primary sortas="a-Glibc">Glibc</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>The Glibc package contains the main C library. This library provides
    the basic routines for allocating memory, searching directories, opening and
    closing files, reading and writing files, string handling, pattern matching,
    arithmetic, and so on.</para>

    <para>GlibcパッケージはメインとなるCライブラリです。
    このライブラリは基本となるルーチンを提供します。例えば、メモリアロケーション、ディレクトリサーチ、ファイルのオープン・クローズ、ファイルの読み書き、文字列のハンドリング、パターンマッチング、計算などを提供します。
    </para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&glibc-ch6-sbu;</seg>
        <seg>&glibc-ch6-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <!--<title>Installation of Glibc</title>-->
    <title>Glibcのインストール</title>

    <note>
      <para>Some packages outside of LFS suggest installing GNU libiconv in
      order to translate data from one encoding to another. The project's
      home page (<ulink url="http://www.gnu.org/software/libiconv/"/>) says
      <quote>This library provides an <function>iconv()</function>
      implementation, for use on systems which don't have one, or whose
      implementation cannot convert from/to Unicode.</quote> Glibc provides
      an <function>iconv()</function> implementation and can convert from/to
      Unicode, therefore libiconv is not required on an LFS system.</para>

     <para>LFSで扱っていないいくつかのパッケージは、データのコード変換にGNU libiconvのインストールを推奨しています。
     libiconvプロジェクトのホームページ(<ulink url="http://www.gnu.org/software/libiconv/"/>)では、次のように書かれています。
     <quote>このライブラリは、コード変換機能を持っていないシステムや、Unicodeとのコード変換が出来ないシステムのために、提供されています</quote>
     Glibcは<function>iconv()</function>を提供しており、Unicodeとの変換が可能であるので、LFSシステムにおいてはlibiconvは必要ありません。
     </para>
    </note>

    <para>The Glibc build system is self-contained and will install
    perfectly, even though the compiler specs file and linker are still
    pointing at <filename class="directory">/tools</filename>. The specs
    and linker cannot be adjusted before the Glibc install because the
    Glibc autoconf tests would give false results and defeat the goal
    of achieving a clean build.</para>

    <para>Glibcのビルドシステムはパッケージ内部に含まれており、例えコンパイラのSpecsファイルやリンカが<filename class="directory">/tools</filename>を指していたとしても、完璧にインストールが行われます。
    Specsファイルとリンカは、Glibcをインストールする前に調整することが出来ません。
    なぜなら、Glibcのautoconfテストがfalseの結果を返し、クリーンなビルドを行うという目標をだめにしてしまうからです。
    </para>

<!--
    This should have been fixed a long time ago.

    <para>In the vi_VN.TCVN locale, <command>bash</command> enters an infinite
    loop at startup. It is unknown whether this is a <command>bash</command>
    bug or a Glibc problem. Disable installation of this locale in order to
    avoid the problem:</para>

    <para>vi_VN.TCVN ロケールにおいて、<command>bash</command>を起動すると無限ループに陥ります。
    <command>bash</command>のバグなのか、Glibcのバグなのか分かっていません。
    この問題を避けるため、このロケールのインストールを行わないようにします：
    </para>

<screen><userinput remap="pre">sed -i '/vi_VN.TCVN/d' localedata/SUPPORTED</userinput></screen>
-->

    <para>Fix a problem that causes the build to fail in the LFS environment:</para>
    <para>LFSの環境において、ビルドに失敗する問題を修正します：：</para> 

<screen><userinput remap="pre">sed -i 's#&lt;rpc/types.h&gt;#"rpc/types.h"#' sunrpc/rpc_clntout.c</userinput></screen>

<!--    <para>When running <command>make install</command>, a script called
    <filename>test-installation.pl</filename> performs a small sanity test on
    our newly installed Glibc. However, because our toolchain still points to
    the <filename class="directory">/tools</filename> directory, the sanity
    test would be carried out against the wrong Glibc. We can force the script
    to check the Glibc we have just installed with the following:</para>

    <para><command>make install</command> 実行時、新しくインストールしようとしているGlibcに対して、<filename>test-installation.pl</filename> と呼ばれるスクリプトにより、ちょっとしたテストが実行されます。
    しかしながら、現時点のtoolchainはまだ<filename class="directory">/tools</filename>ディレクトリを指しているため、テストは間違ったGlibcに対して実行されることになります。
    次を実行することで、たった今インストールしたGlibcを強制的にテストするように変更します。
    </para>

<screen><userinput remap="pre">DL=$(readelf -l /bin/sh | sed -n 's@.*interpret.*/tools\(.*\)]$@\1@p')
sed -i &quot;s|libs -o|libs -L/usr/lib -Wl,-dynamic-linker=$DL -o|&quot; \
        scripts/test-installation.pl
unset DL</userinput></screen>-->

    <para>When running <command>make install</command>, a script called
    <filename>test-installation.pl</filename> performs a small sanity test on
    our newly installed Glibc. However, it contains a bug that causes it to
    fail, so prevent it from running by issuing the following command:</para>
    <para><command>make install</command>を実行すると、<filename>test-installation.pl</filename>というスクリプトが、インストールされたGlibcに対して少しのテストを行います。
    しかし、そのスクリプトにはテストに失敗するバグが含まれているので、次のコマンドによって、そのスクリプトの実行しないようにします：</para>

<screen><userinput remap="pre">sed -i '/test-installation.pl/d' Makefile</userinput></screen>

    <para>The <command>ldd</command> shell script contains Bash-specific
    syntax. Change its default program interpreter to <command>/bin/bash</command>
    in case another <command>/bin/sh</command> is installed as described in the
    <ulink url="&blfs-root;view/svn/postlfs/shells.html">Shells</ulink>
    chapter of the BLFS book:</para>

    <para><command>ldd</command> シェルスクリプトは、Bash仕様の文法が含まれています。
    BLFSブックの<ulink url="&blfs-root;view/svn/postlfs/shells.html">Shells</ulink>に記述しているように、別の<command>/bin/sh</command>がインストールされている場合は、<command>ldd</command>のデフォルトのインタープリタを<command>/bin/bash</command>に変更してください。
    </para>

<screen><userinput remap="pre">sed -i 's|@BASH@|/bin/bash|' elf/ldd.bash.in</userinput></screen>

    <para>Now fix a problem that causes some applications to crash when
    utilizing problem nameservers:</para>
    <para>問題のあるnameserverを利用すると、いくつかのアプリケーションがクラッシュする不具合を修正します：</para>
 
<screen><userinput remap="pre">patch -Np1 -i ../&glibc-fix-resolv-patch;</userinput></screen>

    <para>The Glibc documentation recommends building Glibc outside of the source
    directory in a dedicated build directory:</para>
    <para>Glibcのドキュメントでは、ソースディレクトリ外にある個別のビルドディレクトリでビルドすることを推奨しています。
    </para>

<screen><userinput remap="pre">mkdir -v ../glibc-build
cd ../glibc-build</userinput></screen>
<!--
    <para>As in Chapter 5, add the needed compiler flags to CFLAGS for x86 machines.
    Here, the optimization of the library is also set for the gcc compiler to
    enhance compilation speed (-pipe) and package performance (-O3).</para>
    <para>第5章と同様に、x86マシン用に必要なコンパイラフラグをCFLAGSに追加します。
    ここでは、コンパイルのスピードアップ(-pipe)とパフォーマンスアップ(-O3)を行うため、gccコンパイラに対してライブラリの最適化フラグをセットします。</para>

<screen><userinput remap="configure">case `uname -m` in
  i?86) echo "CFLAGS += -march=i486 -mtune=native -O3 -pipe" &gt; configparms ;;
esac</userinput></screen>
-->
    <para>Prepare Glibc for compilation:</para>
    <para>Glibcのコンパイル準備：</para>

<screen><userinput remap="configure">../glibc-&glibc-version;/configure  \
    --prefix=/usr          \
    --disable-profile      \
    --enable-add-ons       \
    --enable-kernel=2.6.25 \
    --libexecdir=/usr/lib/glibc</userinput></screen>

    <variablelist>
      <!--<title>The meaning of the new configure options:</title>-->
      <title>新しいconfigureオプションの意味</title>

      <varlistentry>
        <term><parameter>--libexecdir=/usr/lib/glibc</parameter></term>
        <listitem>
          <para>This changes the location of the <command>pt_chown</command>
          program from its default of <filename
          class="directory">/usr/libexec</filename> to <filename
          class="directory">/usr/lib/glibc</filename>.</para>
          <para><command>pt_chown</command>プログラムの位置をデフォルトである<filename class="directory">/usr/libexec</filename> から <filename class="directory">/usr/lib/glibc</filename> へ変更します。
          </para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>Compile the package:</para>
    <para>パッケージのコンパイル：</para>

<screen><userinput remap="make">make</userinput></screen>

    <important>
      <para>In this section, the test suite for Glibc is considered critical.
      Do not skip it under any circumstance.</para>
      <para>このセクションでは、Glibcのテストツールは重要です。
      どのような事情であれ、テスト実施をスキップしてはいけません。 </para>
    </important>

    <para>Generally a few tests do not pass, but you can generally ignore
    any of the test failures listed below. Now test the build results:</para>
    <para>通常は2,3のテストが失敗しますが、以下に挙げるテスト失敗は無視して構いません。
    以下の手順でビルド結果をテストします：</para>

<!-- cp -v ../glibc-&glibc-version;/iconvdata/gconv-modules iconvdata --> 

<screen><userinput remap="test">make -k check 2&gt;&amp;1 | tee glibc-check-log
grep Error glibc-check-log</userinput></screen>

    <para>You will probably see an expected (ignored) failure in the
    <emphasis>posix/annexc</emphasis> and
    <emphasis>conform/run-conformtest</emphasis> tests.  In addition the Glibc
    test suite is somewhat dependent on the host system.  This is a list of the
    most common issues:</para>

    <para><emphasis>posix/annexc</emphasis> と<emphasis>conform/run-conformtest</emphasis>テストにおいて、おそらく、予期される(ignored)エラーが発生すると思います。
    加えて、Glibcのテストツールは、いくぶんホストシステムに依存します。
    以下は、最も一般的な問題の一例です：
    </para>

    <itemizedlist>
      <!-- Check again after updating from gcc-4.1.x -->
      <!-- Haven;t seen this in quite a while <listitem>
        <para>The <emphasis>nptl/tst-cancel1</emphasis> test will fail when
        using the 4.1 series of GCC.</para>
        <para>GCC 4.1.x を使用した場合、<emphasis>nptl/tst-cancel1</emphasis> テストに失敗します。</para>
      </listitem>-->
      <!-- Was true in glibc-2.3.6, rt/tst-cpuclock2 in glibc-2.11.1 -->

      <listitem>
        <para>The <emphasis>nptl/tst-clock2</emphasis>,
        <emphasis>nptl/tst-attr3</emphasis>,
        <emphasis>tst/tst-cputimer1</emphasis>, and
        <emphasis>rt/tst-cpuclock2</emphasis>
        tests have been known to fail.  The
        reason is not completely understood, but indications are that minor
        timing issues can trigger these failures.</para>
        <para><emphasis>nptl/tst-clock2</emphasis>、<emphasis>nptl/tst-attr3</emphasis>、<emphasis>tst/tst-cputimer1</emphasis>、<emphasis>rt/tst-cpuclock2</emphasis>のテストは失敗することが分かっています。
        その理由ははっきりと分かっていませんが、微妙なタイミングの問題がそれらのテスト失敗を引き起こしているような兆候があります。</para>
      </listitem>

      <listitem>
        <para>The math tests sometimes fail when running on
        systems where the CPU is not a relatively new genuine Intel or
        authentic AMD processor.</para>
        <para>比較的新しい genuine Intel または authentic AMD プロセッサを使用したシステムでは、数学テストで時々エラーになります。
        </para>
      </listitem>

      <!--
      <listitem>
        <para>If you have mounted the LFS partition with the
        <parameter>noatime</parameter> option, the <emphasis>atime</emphasis>
        test will fail. As mentioned in <xref linkend="space-mounting"/>, do not
        use the <parameter>noatime</parameter> option while building LFS.</para>
        <para>もしLFSパーティションを<parameter>noatime</parameter>オプション付きでマウントした場合、<emphasis>atime</emphasis>テストは失敗します。
        <xref linkend="space-mounting"/>で述べたように、LFSシステムを構築している間は、<parameter>noatime</parameter>オプションを使用しないでください。
        </para>
      </listitem>
      -->

      <listitem>
        <para>When running on older and slower hardware or on systems under
        load, some tests can fail because of test timeouts being exceeded.
        Modifying the make check command to set a TIMEOUTFACTOR is reported to
        help eliminate these errors (e.g. <command>TIMEOUTFACTOR=16 
        make -k check</command>).</para>
        <para>古く遅いハードウェアまたは、負荷が高いシステムでテストを実行したとき、テストのタイムアウトが超過したため、いくつかのテストが失敗します。
        環境変数TIMEOUTFACTORをセットすることで、それらエラーが取り除かれることが報告されています。
        (例： <command>TIMEOUTFACTOR=16 make -k check</command>)
        </para>
      </listitem>

      <listitem> 
        <para>Other tests known to fail on some architectures are posix/bug-regex32,  
        misc/tst-writev, elf/check-textrel, nptl/tst-getpid2, and stdio-common/bug22.</para>
        <para>いくつかのアーキテクチャにおいて、テストに失敗する他のテストは、posix/bug-regex32,               misc/tst-writev, elf/check-textrel, nptl/tst-getpid2, stdio-common/bug22 です。</para>

      </listitem>
    </itemizedlist>

    <para>Though it is a harmless message, the install stage of Glibc will
    complain about the absence of <filename>/etc/ld.so.conf</filename>.
    Prevent this warning with:</para>

    <para>無害なメッセージですが、Glibcのインストールの段階で、<filename>/etc/ld.so.conf</filename>が存在しないことを警告します。
    この警告を防ぐため、次を実行します：
    </para>
<screen><userinput remap="install">touch /etc/ld.so.conf</userinput></screen>

    <para>Install the package:</para>
    <para>パッケージのインストール：</para>

<screen><userinput remap="install">make install</userinput></screen>

    <para>Install NIS and RPC related headers that are not installed by
    default; these are required to rebuild glibc and by several BLFS
    packages:</para> 
    <para>デフォルトではインストールされないNISとRPCに関連するヘッダファイルをインストールします。それらヘッダファイルは、glibcの再ビルドといくつかのBLFSパッケージで必要とされるものです：</para>
 
<screen><userinput remap="install">cp -v ../glibc-&glibc-version;/sunrpc/rpc/*.h /usr/include/rpc 
cp -v ../glibc-&glibc-version;/sunrpc/rpcsvc/*.h /usr/include/rpcsvc 
cp -v ../glibc-&glibc-version;/nis/rpcsvc/*.h /usr/include/rpcsvc</userinput></screen>

    <para>The locales that can make the system respond in a different language
    were not installed by the above command. None of the locales are required,
    but if some of them are missing, test suites of the future packages would
    skip important testcases.</para>

    <para>システムのメッセージを様々な言語で表示することを可能にするロケールは、上記コマンドではインストールされません。
    ロケールが必要ないとしても、ロケールのいくつかが存在しない場合、将来のパッケージのテストツールは、重要なテストケースをスキップするかもしれません。
    </para>
    <para>Individual locales can be installed using the
    <command>localedef</command> program. E.g., the first
    <command>localedef</command> command below combines the
    <filename>/usr/share/i18n/locales/cs_CZ</filename>
    charset-independent locale definition with the
    <filename>/usr/share/i18n/charmaps/UTF-8.gz</filename>
    charmap definition and appends the result to the
    <filename>/usr/lib/locale/locale-archive</filename> file.
    The following instructions will install the minimum set of
    locales necessary for the optimal coverage of tests:</para>

    <para>個々のロケールは、<command>localedef</command>プログラムを使用しインストールすることが出来ます。
    例えば、以下の1行目の<command>localedef</command>コマンドは、<filename>/usr/share/i18n/locales/cs_CZ</filename>で定義されるキャラクターセット独立なロケール定義と、<filename>/usr/share/i18n/charmaps/UTF-8.gz</filename>で定義されるキャラクターマップ定義を組み合わせ、その結果を<filename>/usr/lib/locale/locale-archive</filename>ファイルに追加します。
    以下の手順で、テストのために必要な、最低限のロケールをインストールします：
    </para>
<screen role="nodump"><userinput remap="locale-test">mkdir -pv /usr/lib/locale
localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i de_DE -f UTF-8 de_DE.UTF-8
localedef -i en_GB -f UTF-8 en_GB.UTF-8
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i en_US -f UTF-8 en_US.UTF-8
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fa_IR -f UTF-8 fa_IR
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i fr_FR -f UTF-8 fr_FR.UTF-8
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i it_IT -f UTF-8 it_IT.UTF-8
localedef -i ja_JP -f EUC-JP ja_JP
localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R
localedef -i ru_RU -f UTF-8 ru_RU.UTF-8
localedef -i tr_TR -f UTF-8 tr_TR.UTF-8
localedef -i zh_CN -f GB18030 zh_CN.GB18030</userinput></screen>

    <para>In addition, install the locale for your own country, language and
    character set.</para>

    <para>上記に加え、あなたの国のロケール・言語・キャラクターセットをインストールしてください。
    </para>

    <para>Alternatively, install all locales listed in the
    <filename>glibc-&glibc-version;/localedata/SUPPORTED</filename> file
    (it includes every locale listed above and many more) at once with the
    following time-consuming command:</para>

    <para>もう一つの方法として、時間がかかりますが次のコマンドによって、<filename>glibc-&glibc-version;/localedata/SUPPORTED</filename>にリストされている全てのロケールを一度にインストールすることが出来ます。
    </para>

<screen><userinput remap="locale-full">make localedata/install-locales</userinput></screen>

    <para>Then use the <command>localedef</command> command to create and
    install locales not listed in the
    <filename>glibc-&glibc-version;/localedata/SUPPORTED</filename> file
    in the unlikely case you need them.</para>
    <!-- The Live CD patches the localedata/SUPPORTED file instead of
    running localedef, the results are equivalent -->

    <para>ありそうもないですが、もし必要であれば、<command>localedef</command>コマンドで<filename>glibc-&glibc-version;/localedata/SUPPORTED</filename>に含まれないロケールを作成・インストールしてください。
    </para>
  </sect2>

  <sect2 id="conf-glibc" role="configuration">
    <!--<title>Configuring Glibc</title>-->
    <title>Glibcの設定</title>

    <indexterm zone="conf-glibc">
      <primary sortas="e-/etc/nsswitch.conf">/etc/nsswitch.conf</primary>
    </indexterm>

    <indexterm zone="conf-glibc">
      <primary sortas="e-/etc/localtime">/etc/localtime</primary>
    </indexterm>

    <para>The <filename>/etc/nsswitch.conf</filename> file needs to be created
    because, although Glibc provides defaults when this file is missing or corrupt,
    the Glibc defaults do not work well in a networked environment. The time zone
    also needs to be configured.</para>

    <para><filename>/etc/nsswitch.conf</filename>ファイルを作成する必要があります。
    なぜなら、そのファイルが存在しないか間違いがある場合、Glibcはデフォルトの値を提供しますが、ネットワーク接続環境において、Glibcのデフォルト値ではうまく動作しません。
    タイムゾーンもまた設定する必要があります。
    </para>

    <para>Create a new file <filename>/etc/nsswitch.conf</filename> by running the
    following:</para>

    <para>次のコマンドを実行することで、新しい<filename>/etc/nsswitch.conf</filename>を作成します。</para>

<screen><userinput>cat &gt; /etc/nsswitch.conf &lt;&lt; "EOF"
<literal># Begin /etc/nsswitch.conf

passwd: files
group: files
shadow: files

hosts: files dns
networks: files

protocols: files
services: files
ethers: files
rpc: files

# End /etc/nsswitch.conf</literal>
EOF</userinput></screen>

    <para>Install timezone data:</para>
    <para>timezoneデータのインストール：</para>

<screen><userinput>tar -xf ../tzdata&tzdata-version;.tar.gz 

ZONEINFO=/usr/share/zoneinfo
mkdir -pv $ZONEINFO/{posix,right}

for tz in etcetera southamerica northamerica europe africa antarctica  \
          asia australasia backward pacificnew solar87 solar88 solar89 \
          systemv; do
    zic -L /dev/null   -d $ZONEINFO       -y "sh yearistype.sh" ${tz}
    zic -L /dev/null   -d $ZONEINFO/posix -y "sh yearistype.sh" ${tz}
    zic -L leapseconds -d $ZONEINFO/right -y "sh yearistype.sh" ${tz}
done

cp -v zone.tab iso3166.tab $ZONEINFO
zic -d $ZONEINFO -p America/New_York
unset ZONEINFO</userinput></screen>

    <variablelist> 
      <!--<title>The meaning of the zic commands:</title>-->
      <title>zicコマンドの意味</title>
 
      <varlistentry> 
        <term><parameter>zic -L /dev/null ...</parameter></term> 
        <listitem> 
          <para>This creates posix timezones, without any leap seconds.  It is 
          conventional to put these in both 
          <filename class="directory">zoneinfo</filename> and 
          <filename class="directory">zoneinfo/posix</filename>. It is 
          necessary to put the POSIX timezones in 
          <filename class="directory">zoneinfo</filename>, otherwise various 
          test-suites will report errors. On an embedded system, where space is 
          tight and you do not intend to ever update the timezones, you could save 
          1.9MB by not using the <filename class="directory">posix</filename> 
          directory, but some applications or test-suites might give less good 
          results</para>
          <para>うるう秒を含まないPOSIXタイムゾーンを作成します。
          このタイムゾーンは、従来どおり<filename class="directory">zoneinfo</filename>と<filename class="directory">zoneinfo/posix</filename>の両方に格納します。
          POSIXタイムゾーンを<filename class="directory">zoneinfo</filename>に格納する必要があります。格納しなければ、テストツールの実行時にエラーが発生します。
          組み込みシステムにおいて容量の制限が厳しく、タイムゾーンを更新する予定がないのであれば、<filename class="directory">posix</filename>ディレクトリを使用しなければ、1.9MBを節約することができます。
          しかし、いくつかのアプリケーションにおいて、テストツールが多少悪い結果を残すかもしれません。</para> 
        </listitem> 
      </varlistentry> 
      <varlistentry> 
        <term><parameter>zic -L leapseconds ...</parameter></term> 
        <listitem> 
          <para>This creates right timezones, including leap seconds. On an 
          embedded system, where space is tight and you do not intend to 
          ever update the timezones, or care about the correct time, you could 
          save 1.9MB by omitting the <filename class="directory">right</filename> 
          directory.</para>
          <para>うるう秒を含む正しいタイムゾーンを作成します。
          組み込みシステムにおいて容量の制限が厳しく、タイムゾーンを更新する予定がない、もしくはうるう秒を考慮した正確な時刻を必要としない場合は、<filename class="directory">right</filename>ディレクトリを削除することで1.9MBを節約できます。</para> 
        </listitem> 
      </varlistentry> 
      <varlistentry> 
        <term><parameter>zic ... -p ...</parameter></term> 
        <listitem>
          <para>This creates the <filename>posixrules</filename> file. We use
          New York because POSIX requires the daylight savings time rules
          to be in accordance with US rules,</para>
          <para><filename>posixrules</filename>ファイルを作成します。
          POSIXは、アメリカのルールに沿った夏時間ルールを必要としているため、ここではNew Yorkのタイムゾーンを使用しています。</para> 
        </listitem> 
      </varlistentry> 
    </variablelist>

    <para>One way to determine the local time zone is to run the following
    script:</para>
    <para>ローカルタイムゾーンを特定する1つの方法は、次のスクリプトを実行することです。：</para>

<screen role="nodump"><userinput>tzselect</userinput></screen>

    <para>After answering a few questions about the location, the script will
    output the name of the time zone (e.g.,
    <emphasis>America/Edmonton</emphasis>). There are also some other possible
    timezones listed in <filename
    class='directory'>/usr/share/zoneinfo</filename> such as
    <emphasis>Canada/Eastern</emphasis> or <emphasis>EST5EDT</emphasis> that
    are not identified by the script but can be used.</para>

    <para>位置情報に関するいくつかの質問に答えた後、スクリプトはタイムゾーンの名前を表示します(例えば、<emphasis>America/Edmonton</emphasis>)。
    いくつか他に可能性があるタイムゾーンは、<filename class='directory'>/usr/share/zoneinfo</filename>にリストされています。
    それらは<emphasis>Canada/Eastern</emphasis> や <emphasis>EST5EDT</emphasis>のような、スクリプトによって認識はされませんが、使用することが出来るタイムゾーンです。
    </para>

    <para>Then create the <filename>/etc/localtime</filename> file by
    running:</para>

    <para>そして、<filename>/etc/localtime</filename> ファイルを作成します：</para>

<screen><userinput>cp -v --remove-destination /usr/share/zoneinfo/<replaceable>&lt;xxx&gt;</replaceable> \
    /etc/localtime</userinput></screen>

    <para>Replace <replaceable>&lt;xxx&gt;</replaceable> with the name of the
    time zone selected (e.g., Canada/Eastern).</para>

    <para><replaceable>&lt;xxx&gt;</replaceable>は選択したタイムゾーンの名前に置き換えてください。</para>

    <variablelist>
      <!--<title>The meaning of the cp option:</title>-->
      <title>cpのオプションの意味：</title>

      <varlistentry>
        <term><parameter>--remove-destination</parameter></term>
        <listitem>
          <para>This is needed to force removal of the already existing symbolic
          link. The reason for copying the file instead of using a symlink is to
          cover the situation where <filename class="directory">/usr</filename>
          is on a separate partition. This could be important when booted into
          single user mode.</para>
          <para>このオプションは、すでに存在するシンボリックリンクを強制的に削除するために必要です。
          シンボリックリンクを使用する代わりに、ファイルをコピーする理由は、<filename class="directory">/usr</filename>が別のパーティションに存在する状況をカバーするためです。
          これはシングルユーザモードでブートする際、重要になります。
          </para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="conf-ld" role="configuration">
    <!--<title>Configuring the Dynamic Loader</title>-->
    <title>ダイナミックローダの設定</title>

    <indexterm zone="conf-ld">
      <primary sortas="e-/etc/ld.so.conf">/etc/ld.so.conf</primary>
    </indexterm>

    <para>By default, the dynamic loader (<filename
    class="libraryfile">/lib/ld-linux.so.2</filename>) searches through
    <filename class="directory">/lib</filename> and <filename
    class="directory">/usr/lib</filename> for dynamic libraries that are
    needed by programs as they are run. However, if there are libraries in
    directories other than <filename class="directory">/lib</filename> and
    <filename class="directory">/usr/lib</filename>, these need to be added
    to the <filename>/etc/ld.so.conf</filename> file in order for the
    dynamic loader to find them. Two directories that are commonly known
    to contain additional libraries are <filename
    class="directory">/usr/local/lib</filename> and <filename
    class="directory">/opt/lib</filename>, so add those directories to the
    dynamic loader's search path.</para>

    <para>デフォルトでは、ダイナミックローダ(<filename class="libraryfile">/lib/ld-linux.so.2</filename>)は、プログラムを実行する際に必要となるダイナミックライブラリを<filename class="directory">/lib</filename>と<filename class="directory">/usr/lib</filename>から探します。
    しかしながら、<filename class="directory">/lib</filename>と<filename class="directory">/usr/lib</filename>以外のディレクトリにライブラリが存在している場合、ダイナミックローダがそれらライブラリを見つけられるようにするため、<filename>/etc/ld.so.conf</filename>ファイルにパスを追加する必要があります。
    一般に、追加のライブラリが含まれることが知られている2つのディレクトリは、<filename class="directory">/usr/local/lib</filename>と<filename class="directory">/opt/lib</filename>です。したがってそれらディレクトリをダイナミックローダのサーチパスに追加します。
    </para>

    <para>Create a new file <filename>/etc/ld.so.conf</filename> by running the
    following:</para>

    <para>以下を実行し、<filename>/etc/ld.so.conf</filename>を作成します：</para>

<screen><userinput>cat &gt; /etc/ld.so.conf &lt;&lt; "EOF"
<literal># Begin /etc/ld.so.conf
/usr/local/lib
/opt/lib
</literal>
EOF</userinput></screen>

  <para>If desired, the dynamic loader can also search a directory and 
  include the contents of files found there.  Generally the files in  
  this include directory are one line specifying the desired library path. 
  To add this capability run the following commands:</para>
  <para>もし必要であれば、ダイナミックローダーはディレクトリをサーチし、そこで見つけたファイルの内容をインクルードします。
  一般的に、このインクルードディレクトリにあるファイルは、1行でライブラリパスを指定します。
  この機能を追加するには、次のコマンドを実行します：</para>
 
<screen role="nodump"><userinput>cat &gt;&gt; /etc/ld.so.conf &lt;&lt; "EOF" 
<literal># Add an include directory 
include /etc/ld.so.conf.d/*.conf 
</literal> 
EOF 
mkdir /etc/ld.so.conf.d</userinput></screen>

  </sect2>

  <sect2 id="contents-glibc" role="content">
    <!--<title>Contents of Glibc</title>-->
    <title>Glibcの内容</title>

    <segmentedlist>
      <!--<segtitle>Installed programs</segtitle>-->
      <segtitle>インストールされるプログラム</segtitle>
      <!--<segtitle>Installed libraries</segtitle>-->
      <segtitle>インストールされるライブラリ</segtitle>
      <!--<segtitle>Installed directories</segtitle>-->
      <segtitle>インストールされるディレクトリ</segtitle>

      <seglistitem>
        <seg>catchsegv, gencat, getconf, getent, iconv, iconvconfig, ldconfig,
        ldd, lddlibc4, locale, localedef, mtrace, nscd, pcprofiledump,
        pt_chown, rpcgen, sln, sotruss, sprof, tzselect, xtrace,
        zdump, and zic</seg>
        <seg>ld.so, libBrokenLocale.{a,so}, libSegFault.so, libanl.{a,so},
        libbsd-compat.a, libc.{a,so}, libc_nonshared.a, libcidn.so,
        libcrypt.{a,so}, libdl.{a,so}, libg.a, libieee.a, libm.{a,so},
        libmcheck.a, libmemusage.so, libnsl.{a,so}, libnss_compat.so,
        libnss_dns.so, libnss_files.so, libnss_hesiod.so, libnss_nis.so,
        libnss_nisplus.so, libpcprofile.so, libpthread.{a,so},
        libpthread_nonshared.a, libresolv.{a,so}, librpcsvc.a, librt.{a,so},
        libthread_db.so, and libutil.{a,so}</seg>
        <seg>/usr/include/arpa, /usr/include/bits, /usr/include/gnu, 
        /usr/include/net, /usr/include/netash, /usr/include/netatalk, 
        /usr/include/netax25, /usr/include/neteconet, /usr/include/netinet, 
        /usr/include/netipx, /usr/include/netiucv, /usr/include/netpacket, 
        /usr/include/netrom, /usr/include/netrose, /usr/include/nfs, 
        /usr/include/protocols, /usr/include/rpc, /usr/include/rpcsvc,
        /usr/include/sys, /usr/lib/audit, /usr/lib/gconv, /usr/lib/glibc,
        /usr/lib/locale, /usr/share/i18n, /usr/share/zoneinfo</seg>

      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="catchsegv">
        <term><command>catchsegv</command></term>
        <listitem>
          <para>Can be used to create a stack trace when a program
          terminates with a segmentation fault</para>
          <para>プログラムがSegmentation Faultで異常終了した際、スタックとレースを取得するために使用することが出来ます。</para>
          <indexterm zone="ch-system-glibc catchsegv">
            <primary sortas="b-catchsegv">catchsegv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gencat">
        <term><command>gencat</command></term>
        <listitem>
          <para>Generates message catalogues</para>
          <para>メッセージカタログを生成します。</para>
          <indexterm zone="ch-system-glibc gencat">
            <primary sortas="b-gencat">gencat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getconf">
        <term><command>getconf</command></term>
        <listitem>
          <para>Displays the system configuration values for file system
          specific variables</para>
          <para>ファイルシステム固有の設定値を表示します。</para>
          <indexterm zone="ch-system-glibc getconf">
            <primary sortas="b-getconf">getconf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getent">
        <term><command>getent</command></term>
        <listitem>
          <para>Gets entries from an administrative database</para>
          <para>管理データベースからデータを取得します。</para>
          <indexterm zone="ch-system-glibc getent">
            <primary sortas="b-getent">getent</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="iconv">
        <term><command>iconv</command></term>
        <listitem>
          <para>Performs character set conversion</para>
          <para>キャラクターセットの変換を行います。</para>
          <indexterm zone="ch-system-glibc iconv">
            <primary sortas="b-iconv">iconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="iconvconfig">
        <term><command>iconvconfig</command></term>
        <listitem>
          <para>Creates fastloading <command>iconv</command> module configuration
          files</para>
          <para><command>iconv</command>モジュールを高速ローディングするための設定ファイルを作成します。</para>
          <indexterm zone="ch-system-glibc iconvconfig">
            <primary sortas="b-iconvconfig">iconvconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ldconfig">
        <term><command>ldconfig</command></term>
        <listitem>
          <para>Configures the dynamic linker runtime bindings</para>
          <para>ダイナミックリンカのランタイムバインディングを設定します。</para>
          <indexterm zone="ch-system-glibc ldconfig">
            <primary sortas="b-ldconfig">ldconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ldd">
        <term><command>ldd</command></term>
        <listitem>
          <para>Reports which shared libraries are required
          by each given program or shared library</para>
          <para>プログラムまたは共有ライブラリが必要とする共有ライブラリを出力します。</para>
          <indexterm zone="ch-system-glibc ldd">
            <primary sortas="b-ldd">ldd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lddlibc4">
        <term><command>lddlibc4</command></term>
        <listitem>
          <para>Assists <command>ldd</command> with object files</para>
          <para>オブジェクトファイルと共に使用する<command>ldd</command>コマンドを補助します。</para>
          <indexterm zone="ch-system-glibc lddlibc4">
            <primary sortas="b-lddlibc4">lddlibc4</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="locale">
        <term><command>locale</command></term>
        <listitem>
          <para>Prints various information about the current locale</para>
          <para>現在のロケールに関する様々な情報を表示します。</para>
          <indexterm zone="ch-system-glibc locale">
            <primary sortas="b-locale">locale</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="localedef">
        <term><command>localedef</command></term>
        <listitem>
          <para>Compiles locale specifications</para>
          <para>ロケールの設定をコンパイルします。</para>
          <indexterm zone="ch-system-glibc localedef">
            <primary sortas="b-localedef">localedef</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mtrace">
        <term><command>mtrace</command></term>
        <listitem>
          <para>Reads and interprets a memory trace file and displays a summary
          in human-readable format</para>
          <para>メモリトレースファイルを読み込み解釈し、人が読めるフォーマットでサマリを表示します。</para>
          <indexterm zone="ch-system-glibc mtrace">
            <primary sortas="b-mtrace">mtrace</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nscd">
        <term><command>nscd</command></term>
        <listitem>
          <para>A daemon that provides a cache for the most common name
          service requests</para>
          <para>ネームサービスのリクエストのキャッシュを提供するデーモンです。</para>
          <indexterm zone="ch-system-glibc nscd">
            <primary sortas="b-nscd">nscd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pcprofiledump">
        <term><command>pcprofiledump</command></term>
        <listitem>
          <para>Dumps information generated by PC profiling</para>
          <para>PCのプロファイリングによって生成された情報をダンプします。</para>
          <indexterm zone="ch-system-glibc pcprofiledump">
            <primary sortas="b-pcprofiledump">pcprofiledump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pt_chown">
        <term><command>pt_chown</command></term>
        <listitem>
          <para>A helper program for <command>grantpt</command> to set the owner,
          group and access permissions of a slave pseudo terminal</para>
          <para>スレーブとなる疑似端末の所有者、グループ、パーミッションをセットするための<command>grantpt</command>コマンドのヘルパープログラムです。</para>
          <indexterm zone="ch-system-glibc pt_chown">
            <primary sortas="b-pt_chown">pt_chown</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rpcgen">
        <term><command>rpcgen</command></term>
        <listitem>
          <para>Generates C code to implement the Remote Procedure Call (RPC)
          protocol</para>
          <para>Remote Procedure Call (RPC) を実装するためのCコードを生成します。</para>
          <indexterm zone="ch-system-glibc rpcgen">
            <primary sortas="b-rpcgen">rpcgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sln">
        <term><command>sln</command></term>
        <listitem>
          <para>A statically linked <command>ln</command> program</para>
          <para>静的リンクを行う<command>ln</command>プログラム。</para>
          <indexterm zone="ch-system-glibc sln">
            <primary sortas="b-sln">sln</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sotruss"> 
        <term><command>sotruss</command></term> 
        <listitem> 
          <para>Traces shared library procedure calls of a specified command</para>
          <para>指定したコマンドの共有ライブラリのコールをトレースします。</para> 
          <indexterm zone="ch-system-glibc sotruss"> 
            <primary sortas="b-sotruss">sotruss</primary>
          </indexterm> 
        </listitem> 
      </varlistentry>

      <varlistentry id="sprof">
        <term><command>sprof</command></term>
        <listitem>
          <para>Reads and displays shared object profiling data</para>
          <para>共有オブジェクトのプロファイリングデータを読み込み表示します。</para>
          <indexterm zone="ch-system-glibc sprof">
            <primary sortas="b-sprof">sprof</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tzselect">
        <term><command>tzselect</command></term>
        <listitem>
          <para>Asks the user about the location of the system and reports
          the corresponding time zone description</para>
          <para>ユーザにシステムのロケーションについて質問を行い、正しいタイムゾーン情報をレポートします。</para>
          <indexterm zone="ch-system-glibc tzselect">
            <primary sortas="b-tzselect">tzselect</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xtrace">
        <term><command>xtrace</command></term>
        <listitem>
          <para>Traces the execution of a program by printing the currently
          executed function</para>
          <para>現在実行されているファンクションを表示することにより、プログラムの実行をトレースします。</para>
          <indexterm zone="ch-system-glibc xtrace">
            <primary sortas="b-xtrace">xtrace</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zdump">
        <term><command>zdump</command></term>
        <listitem>
          <para>The time zone dumper</para>
          <para>タイムゾーンをダンプします。</para>
          <indexterm zone="ch-system-glibc zdump">
            <primary sortas="b-zdump">zdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zic">
        <term><command>zic</command></term>
        <listitem>
          <para>The time zone compiler</para>
          <para>タイムゾーンコンパイラ。</para>
          <indexterm zone="ch-system-glibc zic">
            <primary sortas="b-zic">zic</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ld.so">
        <term><filename class="libraryfile">ld.so</filename></term>
        <listitem>
          <para>The helper program for shared library executables</para>
          <para>共有ライブラリを使用するプログラムのためのヘルパープログラムです。</para>
          <indexterm zone="ch-system-glibc ld.so">
            <primary sortas="c-ld.so">ld.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libBrokenLocale">
        <term><filename class="libraryfile">libBrokenLocale</filename></term>
        <listitem>
          <para>Used internally by Glibc as a gross hack to get broken programs
          (e.g., some Motif applications) running. See comments in
          <filename>glibc-&glibc-version;/locale/broken_cur_max.c</filename>
          for more information</para>
          <para>異常のあるプログラム(例えばMotifアプリケーション)を見つけるための"gross hack"としてGlibcが内部的に使用します。
          より詳しい情報は、<filename>glibc-&glibc-version;/locale/broken_cur_max.c</filename>のコメントを参照してください。
          </para>
          <indexterm zone="ch-system-glibc libBrokenLocale">
            <primary sortas="c-libBrokenLocale">libBrokenLocale</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libSegFault">
        <term><filename class="libraryfile">libSegFault</filename></term>
        <listitem>
          <para>The segmentation fault signal handler, used by
          <command>catchsegv</command></para>
          <para>Segmentation Faultシグナルハンドラです。<command>catchsegv</command>コマンドによって使用されます。</para>
          <indexterm zone="ch-system-glibc libSegFault">
            <primary sortas="c-libSegFault">libSegFault</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libanl">
        <term><filename class="libraryfile">libanl</filename></term>
        <listitem>
          <para>An asynchronous name lookup library</para>
          <para>非同期の名前解決ライブラリです。</para>
          <indexterm zone="ch-system-glibc libanl">
            <primary sortas="c-libanl">libanl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libbsd-compat">
        <term><filename class="libraryfile">libbsd-compat</filename></term>
        <listitem>
          <para>Provides the portability needed in order to run certain
          Berkeley Software Distribution (BSD) programs under Linux</para>
          <para>Linuxで、一部のBerkeley Software Distribution (BSD)のプログラムを実行するために必要な可搬性を提供します。</para>
          <indexterm zone="ch-system-glibc libbsd-compat">
            <primary sortas="c-libbsd-compat">libbsd-compat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libc">
        <term><filename class="libraryfile">libc</filename></term>
        <listitem>
          <para>The main C library</para>
          <para>メインとなるCライブラリです。</para>
          <indexterm zone="ch-system-glibc libc">
            <primary sortas="c-libc">libc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcidn">
        <term><filename class="libraryfile">libcidn</filename></term>
        <listitem>
          <para>Used internally by Glibc for handling internationalized domain
          names in the <function>getaddrinfo()</function> function</para>
          <para><function>getaddrinfo()</function>関数の中で国際化ドメイン名を扱うために、Glibcが内部的に使用します。</para>
          <indexterm zone="ch-system-glibc libcidn">
            <primary sortas="c-libcidn">libcidn</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcrypt">
        <term><filename class="libraryfile">libcrypt</filename></term>
        <listitem>
          <para>The cryptography library</para>
          <para>暗号化ライブラリ</para>
          <indexterm zone="ch-system-glibc libcrypt">
            <primary sortas="c-libcrypt">libcrypt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libdl">
        <term><filename class="libraryfile">libdl</filename></term>
        <listitem>
          <para>The dynamic linking interface library</para>
          <para>動的リンクインタフェースライブラリ</para>
          <indexterm zone="ch-system-glibc libdl">
            <primary sortas="c-libdl">libdl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libg">
        <term><filename class="libraryfile">libg</filename></term>
        <listitem>
          <para>Dummy library containing no functions. Previously was a runtime
          library for <command>g++</command></para>
          <para>ファンクションを含まないダミーのライブラリです。以前は<command>g++</command>のランタイムライブラリでした。</para>
          <indexterm zone="ch-system-glibc libg">
            <primary sortas="c-libg">libg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libieee">
        <term><filename class="libraryfile">libieee</filename></term>
        <listitem>
          <para>Linking in this module forces error handling rules for math
          functions as defined by the Institute of Electrical and Electronic
          Engineers (IEEE). The default is POSIX.1 error handling</para>
          <para>このモジュールをリンクすることで、Institute of Electrical and Electoronic Engineers (IEEE)によって定義された数学関連のファンクションに、エラーハンドリングルールを強制します。
          </para>
          <indexterm zone="ch-system-glibc libieee">
            <primary sortas="c-libieee">libieee</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libm">
        <term><filename class="libraryfile">libm</filename></term>
        <listitem>
          <para>The mathematical library</para>
          <para>数学ライブラリ</para>
          <indexterm zone="ch-system-glibc libm">
            <primary sortas="c-libm">libm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmcheck">
        <term><filename class="libraryfile">libmcheck</filename></term>
        <listitem>
          <para>Turns on memory allocation checking when linked to</para>
          <para>リンクすると、メモリアロケーションのチェック機能がONになります。</para>
          <indexterm zone="ch-system-glibc libmcheck">
            <primary sortas="c-libmcheck">libmcheck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmemusage">
        <term><filename class="libraryfile">libmemusage</filename></term>
        <listitem>
          <para>Used by <command>memusage</command> to help collect
          information about the memory usage of a program</para>
          <para>プログラムのメモリ使用量に関する情報の収集を手助けするために、<command>memusage</command>によって使用されます。</para>
          <indexterm zone="ch-system-glibc libmemusage">
            <primary sortas="c-libmemusage">libmemusage</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnsl">
        <term><filename class="libraryfile">libnsl</filename></term>
        <listitem>
          <para>The network services library</para>
          <para>ネットワークサービスライブラリ</para>
          <indexterm zone="ch-system-glibc libnsl">
            <primary sortas="c-libnsl">libnsl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnss">
        <term><filename class="libraryfile">libnss</filename></term>
        <listitem>
          <para>The Name Service Switch libraries, containing functions for
          resolving host names, user names, group names, aliases, services,
          protocols, etc.</para>
          <para>Name Service Switchライブラリです。ホスト名の名前解決・ユーザ名・グループ名・aliases・services・protocols等のための機能を含みます。</para>
          <indexterm zone="ch-system-glibc libnss">
            <primary sortas="c-libnss">libnss</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libpcprofile">
        <term><filename class="libraryfile">libpcprofile</filename></term>
        <listitem>
          <para>Contains profiling functions used to track the amount of CPU
          time spent in specific source code lines</para>
          <para>ソースコードの特定の行が消費するCPU時間の合計を追跡するためのファンクションを含みます。</para>
          <indexterm zone="ch-system-glibc libpcprofile">
            <primary sortas="c-libpcprofile">libpcprofile</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libpthread">
        <term><filename class="libraryfile">libpthread</filename></term>
        <listitem>
          <para>The POSIX threads library</para>
          <para>POSIXスレッドライブラリ</para>
          <indexterm zone="ch-system-glibc libpthread">
            <primary sortas="c-libpthread">libpthread</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libresolv">
        <term><filename class="libraryfile">libresolv</filename></term>
        <listitem>
          <para>Contains functions for creating, sending, and interpreting
          packets to the Internet domain name servers</para>
          <para>インターネットドメインネームサーバに対して、パケットの生成と送信および解釈を行うためのファンクションを含みます。</para>
          <indexterm zone="ch-system-glibc libresolv">
            <primary sortas="c-libresolv">libresolv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="librpcsvc">
        <term><filename class="libraryfile">librpcsvc</filename></term>
        <listitem>
          <para>Contains functions providing miscellaneous RPC services</para>
          <para>様々なRPCサービスを提供するファンクションを含みます。</para>
          <indexterm zone="ch-system-glibc librpcsvc">
            <primary sortas="c-librpcsvc">librpcsvc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="librt">
        <term><filename class="libraryfile">librt</filename></term>
        <listitem>
          <para>Contains functions providing most of the interfaces specified
          by the POSIX.1b Realtime Extension</para>
          <para>POSIX.1b Realtime Extensionによって定められた、多くのインタフェースを提供するファンクションを含みます。</para>
          <indexterm zone="ch-system-glibc librt">
            <primary sortas="c-librt">librt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libthread_db">
        <term><filename class="libraryfile">libthread_db</filename></term>
        <listitem>
          <para>Contains functions useful for building debuggers for
          multi-threaded programs</para>
          <para>マルチスレッドプログラムのためのデバッガを構築するために便利なファンクションを含みます。</para>
          <indexterm zone="ch-system-glibc libthread_db">
            <primary sortas="c-libthread_db">libthread_db</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libutil">
        <term><filename class="libraryfile">libutil</filename></term>
        <listitem>
          <para>Contains code for <quote>standard</quote> functions used in
          many different Unix utilities</para>
          <para>多くのUnixユーティリティで使用される<quote>標準的</quote>なファンクションを含みます。</para> 
          <indexterm zone="ch-system-glibc libutil">
            <primary sortas="c-libutil">libutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
