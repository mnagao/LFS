<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<!-- revision 9922 -->

<sect1 id="ch-tools-gcc-pass1" role="wrap">
  <?dbhtml filename="gcc-pass1.html"?>

  <sect1info condition="script">
    <productname>gcc</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

  <title>GCC-&gcc-version; - Pass 1</title>

  <indexterm zone="ch-tools-gcc-pass1">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>tools, pass 1</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/gcc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[2])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-ch5p1-sbu;</seg>
        <seg>&gcc-ch5p1-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <!--<title>Installation of Cross GCC</title>-->
    <title>Cross GCCのインストール</title>

    <para>GCC now requires the GMP, MPFR and MPC packages. As these packages may
    not be included in your host distribution, they will be built with
    GCC.  Unpack each package into the GCC source directory and rename the
    resulting directories so the GCC build procedures will automatically
    use them:</para>
    <para>現在GCCでは、GMPとMPFRとMPCパッケージが必要です。
    これらパッケージはあなたのホストシステムとなるディストリビューションに含まれていないと思いますので、GCCと一緒にビルドします。それぞれのパッケージをGCCのソースディレクトリー内で展開し、展開されたディレクトリをリネームしてください。そうすることで、自動的にそれらパッケージを使ってビルドが行われます。：</para>

<note><para>There are frequent misunderstandings about this chapter.  The 
    procedures are the same as every other chapter as explained earlier (<xref 
    linkend='buildinstr'/>).  First extract the gcc tarball from the sources 
    directory and then change to the directory created.  Only then should you 
    proceed with the instructions below.</para>
    <para>本章について、たびたび誤解が起こります。
    前に説明したとおり(<xref linkend='buildinstr'/>)、その他どの章も手順は同じです。
    最初にソースディレクトリで、gccのtarballを展開し、次に展開したディレクトリに移動します。
    そうすることによって初めて、以下の手順を進めていきます。
    </para></note>

<screen><userinput remap="pre">tar -Jxf ../mpfr-&mpfr-version;.tar.xz
mv -v mpfr-&mpfr-version; mpfr
tar -Jxf ../gmp-&gmp-version;.tar.xz
mv -v gmp-&gmp-version; gmp
tar -zxf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

    <para>The following command will change the location of GCC's default
    dynamic linker to use the one installed in <filename
    class="directory">/tools</filename>. It also removes <filename
    class="directory">/usr/include</filename> from GCC's include search path.
    Issue:</para>
    <para><filename class="directory">/tools</filename>にインストールしたダイナミックリンカを使うようにするため、次のコマンドでGCCのデフォルトのダイナミックリンカを変更します。
    また、GCCのインクルードファイルのサーチパスから、<filename class="directory">/usr/include</filename>を取り除きます。</para> 
 
<screen><userinput remap="pre">for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
      -e 's@/usr@/tools@g' $file.orig &gt; $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' &gt;&gt; $file
  touch $file.orig
done</userinput></screen>
 
    <para>In case the above seems hard to follow, let's break it down a bit.
    First we find all the files under the <filename 
    class="directory">gcc/config</filename> directory that are named either 
    <filename>linux.h</filename>, <filename>linux64.h</filename> or 
    <filename>sysv4.h</filename>.  For each file found, we copy it to a file of 
    the same name but with an added suffix of <quote>.orig</quote>. Then the 
    first sed expression prepends <quote>/tools</quote> to every instance of 
    <quote>/lib/ld</quote>, <quote>/lib64/ld</quote> or 
    <quote>/lib32/ld</quote>, while the second one replaces hard-coded 
    instances of <quote>/usr</quote>. Next, we add our define statements which 
    alter the default startfile prefix to the end of the file. Note that the 
    trailing <quote>/</quote> in <quote>/tools/lib/</quote> is required. 
    Finally, we use <command>touch</command> to update the timestamp on the 
    copied files.  When used in conjunction with <command>cp -u</command>, this 
    prevents unexpected changes to the original files in case the commands are 
    inadvertently run twice.  </para>
    <para>上記を理解することが難しい場合は、一つずつ見ていきましょう。
    最初に、<filename class="directory">gcc/config</filename>ディレクトリ以下にある、<filename>linux.h</filename>、<filename>linux64.h</filename>、<filename>sysv4.h</filename>を探します。
    それらファイルが見つかる度に、サフィックス<quote>.orig</quote>を追加して、そのファイルをコピーします。
    そして、sedコマンドの1つ目のexpressionによって、<quote>/lib/ld</quote>、<quote>/lib64/ld</quote>、<quote>/lib32/ld</quote>を各ファイル名の先頭に付加します。さらに2つ目のexpressionで、<quote>/usr</quote>を<quote>/tools</quote>に置き換えます。
    次に、デフォルトのstartfileのプリフィックスを変更するdefine文をファイルの最後に追加します。
    <quote>/tools/lib/</quote>の末尾にある<quote>/</quote>が必要です。
    最後に、コピーしたファイルのタイムスタンプを更新するため、<command>touch</command>を実行します。
    <command>cp -u</command>を使用するのは、誤ってコマンドを2回実行して元のファイルを変更してしまうことを避けるためです。</para>

    <para>GCC doesn't detect stack protection correctly, which causes problems 
    for the build of Glibc-&glibc-version;, so fix that by issuing the following 
    command:</para> 
    <para>GCCはスタック保護(Stack Protection)を正しく検知せず、それによりGlibc-&glibc-version;のビルドに問題が生じます。
    そのため、次のコマンドで修正します。：
    </para>
 
<screen><userinput remap="pre">sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure</userinput></screen>

    <para>The GCC documentation recommends building GCC outside of the
    source directory in a dedicated build directory:</para>

    <para>GCCのドキュメントでは、ソースディレクトリ外の専用のディレクトリにおいて、ビルドを行うことを推奨しています。
    </para>

<screen><userinput remap="pre">mkdir -v ../gcc-build
cd ../gcc-build</userinput></screen>

    <para>Prepare GCC for compilation:</para>
    <para>以下のとおり、GCCをコンパイルする準備を行います：</para>
<screen><userinput remap="configure">../gcc-&gcc-version;/configure         \
    --target=$LFS_TGT          \
    --prefix=/tools            \
    --with-sysroot=$LFS        \
    --with-newlib              \
    --without-headers          \
    --with-local-prefix=/tools \
    --with-native-system-header-dir=/tools/include \
    --disable-nls              \
    --disable-shared           \
    --disable-multilib         \
    --disable-decimal-float    \
    --disable-threads          \
    --disable-libmudflap       \
    --disable-libssp           \
    --disable-libgomp          \
    --disable-libquadmath      \
    --enable-languages=c       \
    --with-mpfr-include=$(pwd)/../gcc-&gcc-version;/mpfr/src \
    --with-mpfr-lib=$(pwd)/mpfr/src/.libs</userinput></screen>

    <variablelist>
      <title>configureオプションの意味：</title>

      <varlistentry> 
        <term><parameter>--with-newlib</parameter></term> 
        <listitem> 
          <para>Since a working C library is not yet available, this ensures 
          that the inhibit_libc constant is defined when building libgcc. This prevents 
          the compiling of any code that requires libc support.</para>
          <para>この時点で動作するCライブラリがないため、このオプションによって、libgccをビルドする際に、inhibit_libc定数を定義します。
          また、libcサポートを必要とするコードのコンパイルを防ぎます。</para> 
        </listitem> 
      </varlistentry> 
 
      <varlistentry> 
        <term><parameter>--without-headers</parameter></term> 
        <listitem> 
          <para>When creating a complete cross-compiler, GCC requires 
          standard headers compatible with the target system. For our 
          purposes these headers will not be needed. This switch prevents 
          GCC from looking for them.</para>
          <para>完全なクロスコンパイラをビルドする際、GCCはターゲットとなるシステムと互換の標準ヘッダファイルを必要とします。
          しかし、ここでは、それらヘッダは必要ではありません。
          このオプションによって、GCCがそれらヘッダファイルをサーチしないようにします。</para> 
        </listitem> 
      </varlistentry> 
 
      <varlistentry> 
        <term><parameter>--with-local-prefix=/tools</parameter></term> 
        <listitem> 
          <para>The local prefix is the location in the system that GCC will search 
          for locally installed include files. The default is <filename>/usr/local</filename>. 
          Setting this to <filename>/tools</filename> helps keep the host location of 
          <filename>/usr/local</filename> out of this GCC's search path.</para>
          <para>local prefixは、GCCが、ローカルにインストールされたインクルードファイルをサーチする場所を指定します。
          そのデフォルトは<filename>/usr/local</filename>です。
          local prefixを<filename>/tools</filename>にセットすることで、ホストシステムの<filename>/usr/local</filename>をGCCのサーチパスから外します。</para> 
        </listitem> 
      </varlistentry> 
 
      <varlistentry> 
        <term><parameter>--with-native-system-header-dir=/tools/include</parameter></term> 
        <listitem> 
          <para>By default GCC searches <filename>/usr/include</filename> for system 
          headers. In conjunction with the sysroot switch, this would translate normally 
          to <filename>$LFS/usr/include</filename>. However the headers that will be installed 
          in the next two sections will go to <filename>$LFS/tools/include</filename>. This 
          switch ensures that gcc will find them correctly. In the second pass of GCC, this 
          same switch will ensure that no headers from the host system are found.</para>
          <para>デフォルトでは、GCCはシステムヘッダを探すために、<filename>/usr/include</filename>をサーチします。
          sysrootにスイッチすると、そのサーチパスは<filename>$LFS/usr/include</filename>に置き換えられます。
          しかしながら、次に続く2つのセクションでインストールされるヘッダファイルは、<filename>$LFS/tools/include</filename>に格納されてしまいます。
          この問題に対して、このオプションによって、GCCがそれらヘッダファイルを正しく見つけられるようにします。
          GCCのビルド2回目において、この同じオプションを指定することで、ホストシステム上のヘッダファイルが使われないようにします。</para>
        </listitem> 
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-shared</parameter></term>
        <listitem>
          <para>This switch forces GCC to link its internal libraries
          statically. We do this to avoid possible issues with the host
          system.</para>
          <para>このオプションにより、gccは静的にリンクされます。
          これは、ホストシステム側の問題による影響を避けるために行います。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-decimal-float, --disable-threads, --disable-libmudflap, --disable-libssp, --disable-libgomp, --disable-libquadmath</parameter></term>
        <listitem>
          <para>These switches disable support for the decimal floating point
          extension, threading, libmudflap, libssp and libgomp and libquadmath
          respectively. These features will fail to compile when building a
          cross-compiler and are not necessary for the task of cross-compiling
          the temporary libc.</para>

          <para>これらスイッチによって、浮動小数点拡張、スレッド、libmudflap、libssp、libgomp、libquadmathそれぞれのサポートをオフにします。
          これら機能をオンにすることで、クロスコンパイラをビルドする際にコンパイルに失敗します。また、一時的なlibcをクロスコンパイルするためには不要です。</para>
        </listitem> 
      </varlistentry> 

      <varlistentry> 
        <term><parameter>--disable-multilib</parameter></term> 
        <listitem> 
          <para>On x86_64, LFS does not yet support a multilib configuration. 
          This switch is harmless for x86.</para>
          <para>x86_64の環境において、LFSではまだmultilib設定をサポートしていません。
          このスイッチにより、x86環境では害をなくします。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-languages=c</parameter></term>
        <listitem>
          <para>This option ensures that only the C compiler is built.
          This is the only language needed now.</para>          
          <para>Cコンパイラのみをビルドします。これは、現時点で必要なたった一つの言語です。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>Compile GCC by running:</para>
    <para>次を実行してGCCをコンパイルします：</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>Compilation is now complete. At this point, the test suite would
    normally be run, but, as mentioned before, the test suite framework is
    not in place yet. The benefits of running the tests at this point
    are minimal since the programs from this first pass will soon be
    replaced.</para>
    <para>これでコンパイルが完了です。
    この時点でテストツールを正常に実行できますが、前に述べたとおり、テストツールのフレームワークがまだ整っていません。GCCのプログラムはすぐに置き換えられてしまうので、この時点における、テスト実施のメリットはほとんどありません。
    </para>
    <para>Install the package:</para>
    <para>パッケージをインストールします：</para>

<screen><userinput remap="install">make install</userinput></screen>

    <para>Using <parameter>--disable-shared</parameter> means that the
    <filename>libgcc_eh.a</filename> file isn't created and installed. The
    Glibc package depends on this library as it uses
    <parameter>-lgcc_eh</parameter> within its build system. This dependency
    can be satisfied by creating a symlink to <filename>libgcc.a</filename>,
    since that file will end up containing the objects normally contained in
    <filename>libgcc_eh.a</filename>:</para>
    <para><parameter>--disable-shared</parameter>を指定することは、<filename>libgcc_eh.a</filename>ファイルは作成されず、インストールもされないことを意味します。
    Glibcパッケージは、ビルドシステム内で<parameter>-lgcc_eh</parameter>を使用するので、このライブラリに依存しています。
    この<filename>libgcc.a</filename>ファイルは、結局のところ、<filename>libgcc_eh.a</filename>に通常含まれるオブジェクトを含んでいるので、<filename>libgcc.a</filename>へのシンボリックリンクを作成することで、この依存を解決できます。：</para>

<screen><userinput remap="install">ln -vs libgcc.a `$LFS_TGT-gcc -print-libgcc-file-name | sed 's/libgcc/&amp;_eh/'`</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>Details on this package are located in
    <xref linkend="contents-gcc" role="."/></para>
    <para>このパッケージの詳細は、<xref linkend="contents-gcc" role="."/>にあります。
    </para>

  </sect2>

</sect1>
