<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<!-- revision 9106 -->

<sect1 id="ch-tools-toolchaintechnotes">
  <?dbhtml filename="toolchaintechnotes.html"?>

  <title>Toolchain 技術メモ</title>

  <para>This section explains some of the rationale and technical details
  behind the overall build method. It is not essential to immediately
  understand everything in this section. Most of this information will be
  clearer after performing an actual build. This section can be referred
  to at any time during the process.</para>

  <para>本章では、全体的な構築手法の背後にある論理的根拠と技術的な詳細について説明します。
  本章の全てをすぐに理解することは必須ではありません。
  ここに書いてある情報は、実際の構築を行った後に、より明快に感じられるでしょう。
  構築のプロセスの間、いつでも本章を参照することが出来ます。
  </para>

  <para>The overall goal of <xref linkend="chapter-temporary-tools"/> is to
  produce a temporary area that contains a known-good set of tools that can be
  isolated from the host system. By using <command>chroot</command>, the
  commands in the remaining chapters will be contained within that environment,
  ensuring a clean, trouble-free build of the target LFS system. The build
  process has been designed to minimize the risks for new readers and to provide
  the most educational value at the same time.</para>
  <para><xref linkend="chapter-temporary-tools"/>の目標は、良く知られたツール群を持つ、ホストシステムから隔離された一時的な環境を作り出すことです。
  <command>chroot</command>コマンドを使用することで、これ以降の章で実行するコマンドの影響はその環境内だけに封じ込まれ、構築するLFSシステムをきれいにトラブルなしでビルドされることを保証します。
  ビルドのプロセスは、新しい読者のためにリスクを最小限にするようデザインされており、同時に最大限の教育的な価値を提供します。</para>

  <important>
    <para>Before continuing, be aware of the name of the working platform,
    often referred to as the target triplet. A simple way to determine the
    name of the target triplet is to run the <command>config.guess</command>
    script that comes with the source for many packages. Unpack the Binutils
    sources and run the script: <userinput>./config.guess</userinput> and note
    the output. For example, for a modern 32-bit Intel processor the
    output will likely be <emphasis>i686-pc-linux-gnu</emphasis>.</para>

    <para>作業を進める前に、作業を行うプラットフォーム名(しばしば三つ揃いのターゲット名として参照されます)に注意を払ってください。
    ターゲット名を知る簡単な方法は、多くのパッケージに付属する<command>config.guess</command>スクリプトを実行することです。
    Binutilsのソースを展開し、<userinput>./config.guess</userinput>を実行し、その結果を書きとめてください。
    例えば、最近の32-bitのIntelプロセッサーでは、<emphasis>i686-pc-linux-gnu</emphasis>のようなものになるでしょう。
    </para>

    <para>Also be aware of the name of the platform's dynamic linker, often
    referred to as the dynamic loader (not to be confused with the standard
    linker <command>ld</command> that is part of Binutils). The dynamic linker
    provided by Glibc finds and loads the shared libraries needed by a program,
    prepares the program to run, and then runs it. The name of the dynamic
    linker for a 32-bit Intel machine will be
    <filename class="libraryfile">ld-linux.so.2</filename>.
    A sure-fire way to determine the name of the dynamic linker is to
    inspect a random binary from the host system by running:
    <userinput>readelf -l &lt;name of binary&gt; | grep interpreter</userinput>
    and noting the output. The authoritative reference covering all platforms
    is in the <filename>shlib-versions</filename> file in the root of the Glibc
    source tree.</para>

    <para>ダイナミックリンカの名前についても気をつけてください。ダイナミックリンカはしばしばダイナミックローダと呼ばれることもあります。(スタンダードリンカである<command>ld</command>と混同しないでください。これはBinutilsの一部です)。
    Glibcが提供するダイナミックリンカは、プログラムに必要な共有ライブラリを探してロードし、プログラムを起動する準備を行い、そしてプログラムを実行します。
    32-bitのIntelマシンでは、ダイナミックリンカの名前は、<filename class="libraryfile">ld.so.1</filename> です。
    ダイナミックリンカの名前を確実に知る方法は、ホストシステム上の適当なバイナリファイルに対して、<userinput>readelf -l &lt;name of binary&gt; | grep interpreter</userinput> を実行し、出力結果を書き留めることです。
    全てのプラットフォームをカバーする正式なリファレンスは、Glibcのソースツリーのルートの<filename>shlib-versions</filename>にあります。
    </para>
  </important>

  <para>Some key technical points of how the <xref
  linkend="chapter-temporary-tools"/> build method works:</para>

  <para><xref linkend="chapter-temporary-tools"/>の構築手法のキーとなる技術的なポイントは、以下のとおりです。
  </para>

  <itemizedlist>
    <listitem>
      <para>Slightly adjusting the name of the working platform, by changing the
      &quot;vendor&quot; field target triplet by way of the
      <envar>LFS_TGT</envar> variable, ensures that the first build of Binutils
      and GCC produces a compatible cross-linker and cross-compiler. Instead of
      producing binaries for another architecture, the cross-linker and
      cross-compiler will produce binaries compatible with the current
      hardware.</para>
      <para><envar>LFS_TGT</envar>変数の&quot;vendor&quot;フィールドを変更し、プラットフォームの名前を少し調整することで、最初にビルドするBinutilsとGCCは、異なるアーキテクチャ用のクロスリンカとクロスコンパイラを生成します。
      他のアーキテクチャ用のバイナリを生成するのでなければ、クロスリンカとクロスコンパイラは今使用しているハードウェア用のバイナリを生成します。</para>
    </listitem>
    <listitem>
      <para> The temporary libraries are cross-compiled.  Because a
      cross-compiler by its nature cannot rely on anything from its host
      system, this method removes potential contamination of the target
      system by lessening the chance of headers or libraries from the host
      being incorporated into the new tools.  Cross-compilation also allows for
      the possibility of building both 32-bit and 64-bit libraries on 64-bit
      capable hardware.</para>
      <para>一時的なライブラリはクロスコンパイルされます。
      クロスコンパイラはその本質から、ホストシステムに依存することが出来ないため、この方法は、新しいツールにホストシステムのヘッダーファイルやライブラリが組み込まれる機会を減らすことで、構築しようとするシステムの汚染の可能性を取り除きます。
      クロスコンパイルはまた、64-bitハードウェア上で32-bitと64-bitの両方のライブラリをビルドすることを可能とします。</para>
    </listitem>
    <listitem>
      <para>Careful manipulation of <command>gcc</command>'s
      <filename>specs</filename> file tells the compiler which target dynamic
      linker will be used</para>
      <para><command>gcc</command>の<filename>specs</filename>ファイルを注意深く操作することにより、コンパイラにどのダイナミックリンカを使用するか指定します。
      </para>
    </listitem>
  </itemizedlist>

  <para>Binutils is installed first because the <command>configure</command>
  runs of both GCC and Glibc perform various feature tests on the assembler
  and linker to determine which software features to enable or disable. This
  is more important than one might first realize. An incorrectly configured
  GCC or Glibc can result in a subtly broken toolchain, where the impact of
  such breakage might not show up until near the end of the build of an
  entire distribution. A test suite failure will usually highlight this error
  before too much additional work is performed.</para>

  <para>Binutilsを最初にインストールします。なぜなら、GCCとGlibcの両方で、アセンブラとリンカの機能が有効か無効か判断するために、<command>configure</command>スクリプトが様々な機能テストを行うからです。
  これ(Binutilsを最初にインストールすること)は、何よりも重要なことです。
  正しく導入されていないGCCまたはGlibcは、微妙に壊れたtoolchainとなり、そのような破損の影響は、LFS構築の最終段階付近になるまで現れません。
  余分な作業をするはめになる前に、テストツールの失敗により、通常はこのような破損は明らかになります。
  </para>

  <para>Binutils installs its assembler and linker in two locations,
  <filename class="directory">/tools/bin</filename> and <filename
  class="directory">/tools/$LFS_TGT/bin</filename>. The tools in one
  location are hard linked to the other. An important facet of the linker is
  its library search order. Detailed information can be obtained from
  <command>ld</command> by passing it the <parameter>--verbose</parameter>
  flag. For example, an <userinput>ld --verbose | grep SEARCH</userinput>
  will illustrate the current search paths and their order. It shows which
  files are linked by <command>ld</command> by compiling a dummy program and
  passing the <parameter>--verbose</parameter> switch to the linker. For example,
  <userinput>gcc dummy.c -Wl,--verbose 2&gt;&amp;1 | grep succeeded</userinput>
  will show all the files successfully opened during the linking.</para>

  <para>Binutilsはアセンブラとリンカを2つの場所(<filename class="directory">/tools/bin</filename>と<filename class="directory">/tools/$LFS_TGT/bin</filename>)にインストールします。
  一方は他方にハードリンクされます。
  リンカの重要な面はライブラリのサーチ順序です。
  <command>ld</command> に<parameter>--verbose</parameter> フラグを渡すことで、詳細な情報を得ることが出来ます。
  例えば、<userinput>ld --verbose | grep SEARCH</userinput> を実行することにより、サーチパスとサーチ順序を明らかにします。
  ダミープログラムをコンパイルし、<parameter>--verbose</parameter>フラグをリンカに渡すことで、どのファイルが<command>ld</command>によってリンクされるか表示します。
  例えば、<userinput>gcc dummy.c -Wl,--verbose 2&gt;&amp;1 | grep succeeded</userinput> を実行すると、リンク処理で全てのファイルが正常にオープンできたことが表示されます。
  </para>

  <para>The next package installed is GCC. An example of what can be
  seen during its run of <command>configure</command> is:</para>

  <para>次にインストールされるパッケージはGCCです。
  <command>configure</command> 実行による結果表示の例は以下のとおりです：
  </para>

<screen><computeroutput>checking what assembler to use... /tools/i686-lfs-linux-gnu/bin/as
checking what linker to use... /tools/i686-lfs-linux-gnu/bin/ld</computeroutput></screen>

  <para>This is important for the reasons mentioned above. It also demonstrates
  that GCC's configure script does not search the PATH directories to find which
  tools to use. However, during the actual operation of <command>gcc</command>
  itself, the same search paths are not necessarily used. To find out which
  standard linker <command>gcc</command> will use, run:
  <userinput>gcc -print-prog-name=ld</userinput>.</para>

  <para>これは、上記で述べた理由により、重要です。また、GCCのconfigureスクリプトは、PATHで定義されたディレクトリをサーチしないことも示しています。
  しかしながら、<command>gcc</command> の実際のオペレーションでは、必ずしも同じサーチパスが使用されません。
  <command>gcc</command>がどのスタンダードリンカを使用するか確認するためには、<userinput>gcc -print-prog-name=ld</userinput>を実行してください。
  </para>

  <para>Detailed information can be obtained from <command>gcc</command> by
  passing it the <parameter>-v</parameter> command line option while compiling
  a dummy program. For example, <userinput>gcc -v dummy.c</userinput> will show
  detailed information about the preprocessor, compilation, and assembly stages,
  including <command>gcc</command>'s included search paths and their order.</para>

  <para><command>gcc</command> に <parameter>-v</parameter> オプションを渡すことで、詳細な情報を得ることが出来ます。
  例えば、<userinput>gcc -v dummy.c</userinput> を実行することで、プリプロセッサ、コンパイル、アセンブラステージ、<command>gcc</command>のインクルードサーチパスとその順序も含めて詳細情報が表示されます。
  </para>

<!-- ここから -->

  <para>The next package installed is Glibc. The most important considerations
  for building Glibc are the compiler, binary tools, and kernel headers. The
  compiler is generally not an issue since Glibc will always use the compiler
  relating to the <parameter>--host</parameter> parameter passed to its
  configure script, e.g. in our case,
  <command>i686-lfs-linux-gnu-gcc</command>. The binary tools and kernel
  headers can be a bit more complicated. Therefore, take no risks and use the
  available configure switches to enforce the correct selections. After the run
  of <command>configure</command>, check the contents of the
  <filename>config.make</filename> file in the <filename
  class="directory">glibc-build</filename> directory for all important details.
  Note the use of <parameter>CC="i686-lfs-gnu-gcc"</parameter> to control which
  binary tools are used and the use of the <parameter>-nostdinc</parameter> and
  <parameter>-isystem</parameter> flags to control the compiler's include
  search path. These items highlight an important aspect of the Glibc
  package&mdash;it is very self-sufficient in terms of its build machinery and
  generally does not rely on toolchain defaults.</para>

  <para>次にインストールされるパッケージはGlibcです。
  Glibcのビルドで最も考慮すべき点は、コンパイラ・バイナリツール・カーネルヘッダです。
  Glibcは、configureスクリプトに渡す<parameter>--host</parameter>パラメータに関連付いたコンパイラをいつも使用するので、一般的にコンパイラは問題にはなりません。
  例えば、我々のケースにおいては、<command>i686-lfs-linux-gnu-gcc</command>がコンパイラとなります。
  バイナリツールとカーネルヘッダは、多少複雑になっています。
  それゆえに、正しい選択を行うため、リスクのない利用可能なconfigureのスイッチを使用します。
  <command>configure</command> 実行後、重要な詳細情報を確認するため、<filename class="directory">glibc-build</filename>にある<filename>config.make</filename>の内容をチェックしてください。
  使用するバイナリツールを制御するため、パラメータ<parameter>CC="i686-lfs-gnu-gcc"</parameter>を使用することおよび、コンパイラのインクルードパスを制御するため、<parameter>-nostdinc</parameter>と<parameter>-isystem</parameter>フラグを使用することに留意してください。
  上記で述べたこれら項目(コンパイラ・バイナリツール・カーネルヘッダ)は、Glibcの重要な側面を明らかにします &mdash; ビルドの仕組みに関してはとても自己充足的で、toolchainのデフォルトに依存していません。
  </para>

  <para>After the Glibc installation, change <command>gcc</command>'s specs file
  to point to the new dynamic linker in <filename
  class="directory">/tools/lib</filename>.  This last step is vital in ensuring
  that searching and linking take place only within the <filename
  class="directory">/tools</filename> prefix. A hard-wired
  path to a dynamic linker is embedded into every Executable and Link Format
  (ELF)-shared executable.  This can be inspected by running:
  <userinput>readelf -l &lt;name of binary&gt; | grep interpreter</userinput>.
  Amending <command>gcc</command>'s specs file ensures that every program
  compiled from here through the end of this chapter will use the new dynamic
  linker in <filename class="directory">/tools/lib</filename>.</para>
  <para>Glibcのインストール後、<command>gcc</command>のspecsファイルを変更し、<filename class="directory">/tools/lib</filename>にある新しいダイナミックリンカを指し示すようにします。
  この最後のステップは、ライブラリのサーチとリンクが<filename class="directory">/tools</filename>プリフィックスだけになることを保証するためには不可欠です。
  全てのELF(Executable and Link Format)共有実行ファイルに、ハードコーディングされたダイナミックリンカのパスが埋め込まれます。
  これは、次のコマンドを実行することで確認できます：
  <userinput>readelf -l &lt;name of binary&gt; | grep interpreter</userinput>。
  gccのspecsファイルを修正することで、ここから本章の最後までの間にコンパイルする各プログラムが、<filename class="directory">/tools/lib</filename>にある新しいダイナミックリンカを使用するようになります。
  </para>

  <para>For the second pass of GCC, its sources also need to be modified
  to tell GCC to use the new dynamic linker. Failure to do
  so will result in the GCC programs themselves having the name of the
  dynamic linker from the host system's <filename
  class="directory">/lib</filename> directory embedded into them, which
  would defeat the goal of getting away from the host.</para>

  <para>GCCの2回目のコンパイルに備え、GCCに新しいダイナミックリンカを使用させるため、GCCのソースを変更する必要があります。
  新しいダイナミックリンカを使用しないと、ホストシステムの<filename class="directory">/lib</filename>がGCC自身に埋め込まれてしまい、ホストシステムに依存しないという目標の実現に失敗してしまいます。
  </para>

  <para>During the second pass of Binutils, we are able to utilize the
  <parameter>--with-lib-path</parameter> configure switch to control
  <command>ld</command>'s library search path.  From this point onwards,
  the core toolchain is self-contained and self-hosted. The remainder of
  the <xref linkend="chapter-temporary-tools"/> packages all build against
  the new Glibc in <filename class="directory">/tools</filename>.</para>

  <para>Binutilsの2回目の構築において、<command>ld</command>のライブラリサーチパスをコントロールするために、<parameter>--with-lib-path</parameter>のconfigureスイッチを利用することが出来ます。
  この2回目の構築時点以降、コアとなるtoolchainは自らのものを使用することになります。
  <xref linkend="chapter-temporary-tools"/>の残りのパッケージは、<filename class="directory">/tools</filename>の新しいGlibcが使用されるようになります。
  </para>

  <para>Upon entering the chroot environment in <xref
  linkend="chapter-building-system"/>, the first major package to be
  installed is Glibc, due to its self-sufficient nature mentioned above.
  Once this Glibc is installed into <filename
  class="directory">/usr</filename>, we will perform a quick changeover of the
  toolchain defaults, and then proceed in building the rest of the target
  LFS system.</para>

  <para><xref linkend="chapter-building-system"/>のchroot環境に移り、最初のインストールするメジャーなパッケージはGlibcです。これは、上で述べたとおり、この時点で自立したtoolchainが構築されているからです。
  <filename class="directory">/usr</filename>にGlibcをインストール後、toolchainのデフォルトの変更を行います。そして、LFSシステムの残りの構築手順を進めていきます。
  </para>

  <!-- FIXME: Removed as part of the fix for bug 1061 - we no longer build pass1
      packages statically, therefore this explanation isn't required

  <sect2>
  <title>Notes on Static Linking</title>

  <para>Besides their specific task, most programs have to perform many
  common and sometimes trivial operations. These include allocating
  memory, searching directories, reading and writing files, string
  handling, pattern matching, arithmetic, and other tasks. Instead of
  obliging each program to reinvent the wheel, the GNU system provides
  all these basic functions in ready-made libraries. The major library
  on any Linux system is Glibc.</para>

  <para>There are two primary ways of linking the functions from a
  library to a program that uses them&mdash;statically or dynamically. When
  a program is linked statically, the code of the used functions is
  included in the executable, resulting in a rather bulky program. When
  a program is dynamically linked, it includes a reference to the
  dynamic linker, the name of the library, and the name of the function,
  resulting in a much smaller executable. A third option is to use the
  programming interface of the dynamic linker (see <filename>dlopen(3)</filename>
  for more information).</para>

  <para>Dynamic linking is the default on Linux and has three major
  advantages over static linking. First, only one copy of the executable
  library code is needed on the hard disk, instead of having multiple
  copies of the same code included in several programs, thus saving
  disk space. Second, when several programs use the same library
  function at the same time, only one copy of the function's code is
  required in core, thus saving memory space. Third, when a library
  function gets a bug fixed or is otherwise improved, only the one
  library needs to be recompiled instead of recompiling all programs
  that make use of the improved function.</para>

  <para>If dynamic linking has several advantages, why then do we
  statically link the first two packages in this chapter? The reasons
  are threefold&mdash;historical, educational, and technical. The
  historical reason is that earlier versions of LFS statically linked
  every program in this chapter. Educationally, knowing the difference
  between static and dynamic linking is useful. The technical benefit is
  a gained element of independence from the host, meaning that those
  programs can be used independently of the host system. However, it is
  worth noting that an overall successful LFS build can still be
  achieved when the first two packages are built dynamically.</para>

  </sect2>-->

</sect1>
