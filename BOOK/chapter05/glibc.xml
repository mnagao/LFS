<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<!-- revision 9963 -->

<sect1 id="ch-tools-glibc" role="wrap">
  <?dbhtml filename="glibc.html"?>

  <sect1info condition="script">
    <productname>glibc</productname>
    <productnumber>&glibc-version;</productnumber>
    <address>&glibc-url;</address>
  </sect1info>

  <title>Glibc-&glibc-version;</title>

  <indexterm zone="ch-tools-glibc">
    <primary sortas="a-Glibc">Glibc</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/glibc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[2])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&glibc-ch5-sbu;</seg>
        <seg>&glibc-ch5-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Glibcのインストール</title>

    <para>In some cases, particularly LFS 7.1, the rpc headers were not 
    installed properly.  Test to see if they are installed in the host system 
    and install if they are not:</para>

    <para>特にLFS 7.1において、時々、rpcヘッダファイルが正常にインストールされない場合はあります。
    ホストシステムにそれらヘッダファイルがインストールされているか確認し、もしインストールされていない場合はインストールします：
</para>
 
<screen><userinput remap="pre">if [ ! -r /usr/include/rpc/types.h ]; then
  su -c 'mkdir -p /usr/include/rpc'
  su -c 'cp -v sunrpc/rpc/*.h /usr/include/rpc'
fi</userinput></screen>
 
    <para>Fix an issue when building Glibc-&glibc-version; with GCC-&gcc-version;:</para>

    <para>GCC-&gcc-version;でGlibc-&glibc-version;をビルドする際の問題を修正します：</para>
 
<screen><userinput remap="pre">sed -i 's/ -lgcc_s//' Makeconfig</userinput></screen>

    <para>The Glibc documentation recommends building Glibc outside of the source
    directory in a dedicated build directory:</para>

    <para>Glibcのドキュメントでは、ソースディレクトリ外のディレクトリでビルドを行うことを推奨しています。
    </para>

<screen><userinput>mkdir -v ../glibc-build
cd ../glibc-build</userinput></screen>
<!--
    <para>Because Glibc no longer supports i386, its developers say to use the
    compiler flag <parameter>-march=i486</parameter> when building it for x86
    machines. There are several ways to accomplish that, but testing shows that
    the flag is best placed inside the build variable <quote>CFLAGS</quote>.
    Instead of overriding completely what Glibc's internal build system uses
    for CFLAGS, append the new flag to the existing contents of CFLAGS by
    making use of the special file <filename>configparms</filename>. The
    -mtune=native flag is also necessary to reset a reasonable value for -mtune
    that is changed when setting -march.</para>
    <para>Glibcはもうi386をサポートしないため、x86マシンでビルドする際、開発者はコンパイラのフラグ<parameter>-march=i486</parameter>を使うように言っています。
    それを行うにはいくつかの方法がありますが、ビルドで使用する変数<quote>CFLAGS</quote>にそのフラグをセットすることが最も良いと、テスト結果が示しています。
    Glibc内部のビルドシステムが使用するCFLAGSを完全に上書きする代わりに、特別なファイル<filename>configparms</filename>を使用することにより、CFLAGSの内容に新しいフラグを追加します。
    -marchフラグをセットする際に変更される、-mtuneフラグに適切な値をセットしなおすために、-mtune=nativeフラグも必要です。
    </para>

<screen><userinput remap="configure">case `uname -m` in
  i?86) echo "CFLAGS += -march=i486 -mtune=native" &gt; configparms ;;
esac</userinput></screen>
-->

<para>Fix an issue when building Glibc-&glibc-version; with GCC-&gcc-version;:</para>
<para>GCC-&gcc-version;でGlibc-&glibc-version;をビルドする際の問題を修正します：</para>

<screen><userinput remap="pre">sed -i 's/ -lgcc_s//' ../glibc-&glibc-version;/Makeconfig</userinput></screen>

    <para>Next, prepare Glibc for compilation:</para>
    <para>次にGlibcをコンパイルする準備を行います：</para>

<screen><userinput remap="configure">../glibc-&glibc-version;/configure                             \
      --prefix=/tools                                 \
      --host=$LFS_TGT                                 \
      --build=$(../glibc-&glibc-version;/scripts/config.guess) \
      --disable-profile                               \
      --enable-add-ons                                \
      --enable-kernel=2.6.25                          \
      --with-headers=/tools/include                   \
      libc_cv_forced_unwind=yes                       \
      libc_cv_ctors_header=yes                        \
      libc_cv_c_cleanup=yes</userinput></screen>

    <variablelist>
      <title>configureオプションの意味：</title>

      <varlistentry> 
        <term><parameter>--host=$LFS_TGT, --build=$(../glibc-&glibc-version;/scripts/config.guess)</parameter></term> 
        <listitem> 
          <para>The combined effect of these switches is that Glibc's build system 
          configures itself to cross-compile, using the cross-linker and 
          cross-compiler in <filename class="directory">/tools</filename>.</para>
          <para>これら複数のオプションによって、<filename class="directory">/tools</filename>にあるクロスリンカ、クロスコンパイラを使って、Glibc自身のビルドをクロスコンパイルするように指定します。</para> 
        </listitem> 
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-profile</parameter></term>
        <listitem>
          <para>This builds the libraries without profiling information. Omit
          this option if profiling on the temporary tools is necessary.</para>
          <para>プロファイリング情報なしのライブラリをビルドします。
          テンポラリのツールにプロファイリング情報が必要であれば、このオプションを外して下さい。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-add-ons</parameter></term>
        <listitem>
          <para>This tells Glibc to use the NPTL add-on as its threading
          library.</para>
          <para>NPTLアドオンをスレッドライブラリとして使用します。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-kernel=2.6.25</parameter></term>
        <listitem>
          <para>This tells Glibc to compile the library with support
          for 2.6.25 and later Linux kernels.  Workarounds for older
          kernels are not enabled.</para>
          <para>Linuxカーネル 2.6.22.5以降をサポートするライブラリをコンパイルします。
          これよりも古いカーネルでは利用不可能です。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-headers=/tools/include</parameter></term>
        <listitem>
          <para>This tells Glibc to compile itself against the headers recently
          installed to the tools directory, so that it knows exactly what
          features the kernel has and can optimize itself accordingly.</para>
          <para>Glibcが、カーネルが持つ機能を正確に把握し、最適化が出来るようにするため、toolsディレクトリにインストールしたヘッダを使用して、Glibcをコンパイルします。
          </para>
        </listitem>
      </varlistentry>
<!--ここから-->
      <varlistentry>
        <term><parameter>libc_cv_forced_unwind=yes</parameter></term>
        <listitem>
          <para>The linker installed during
          <xref linkend="ch-tools-binutils-pass1"/> was cross-compiled and as
          such cannot be used until Glibc has been installed.  This means that
          the configure test for force-unwind support will fail, as it relies on
          a working linker.  The libc_cv_forced_unwind=yes variable is passed in
          order to inform <command>configure</command>  that force-unwind
          support is available without it having to run the test.</para>
          <para><xref linkend="ch-tools-binutils-pass1"/>でインストールしたリンカはクロスコンパイルされており、Glibcがインストールされるまで使用することが出来ません。
          このことは、force-unwindサポートのconfigureチェックが、動作しているリンカに依存しているため失敗することを意味しています。
          <command>configure</command>に対して、force-unwindサポートが有効であることを伝えるために、libc_cv_forced_unwind=yesの指定を行います。</para>
        </listitem>
      </varlistentry>
      <varlistentry> 
        <term><parameter>libc_cv_c_cleanup=yes</parameter></term> 
        <listitem>
          <para>Simlarly, we pass libc_cv_c_cleanup=yes through to the
          <command>configure</command> script so that the test is skipped and C
          cleanup handling support is configured.</para>
          <para>同じように、configureによるチェックをスキップし、C cleanup handlingサポートが有効になるように、libc_cv_c_cleanup=yesを<command>configure</command>スクリプトに渡します。</para>
        </listitem>
      </varlistentry>
      <varlistentry> 
        <term><parameter>libc_cv_ctors_header=yes</parameter></term> 
        <listitem> 
          <para>Simlarly, we pass libc_cv_ctors_header=yes through to the 
          <command>configure</command> script so that the test is skipped and 
          gcc constructor support is configured.</para>
          <para>同じように、<command>configure</command>スクリプトに libc_cv_ctors_header=yes を渡し、configureによるチェックをスキップし、gccのコンストラクタサポートを有効にします。</para>
        </listitem> 
      </varlistentry>

    </variablelist>

    <para>During this stage the following warning might appear:</para>
    <para>configureの実行時、次のワーニングが出力されるはずです：</para>

    <blockquote>
<screen><computeroutput>configure: WARNING:
*** These auxiliary programs are missing or
*** incompatible versions: msgfmt
*** some features will be disabled.
*** Check the INSTALL file for required versions.</computeroutput></screen>
    </blockquote>

    <para>The missing or incompatible <command>msgfmt</command> program is
    generally harmless. This <command>msgfmt</command> program is part of the
    Gettext package which the host distribution should provide. </para>

    <para><command>msgfmt</command>がmissingまたはincompatibleであることは、ほとんどの場合問題ありません。
    この<command>msgfmt</command>プログラムはホストシステムのディストリビューションが提供すべきGettextパッケージの一部分です。
    </para>

    <para>Compile the package:</para>
    <para>コンパイルを行います：</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>This package does come with a test suite, however, it cannot be
    run at this time because we do not have a C++ compiler yet.</para>
    <para>このパッケージにはテストツールが付属していますが、まだC++コンパイラが導入されていないため、この時点でテストを実行することは出来ません。</para>

    <note> 
      <para>The test suite also requires locale data to be installed in order to run 
      successfully. Locale data provides information to the system regarding 
      such things as the date, time, and currency formats accepted and output by 
      system utilities. If the test suites are not being run in this chapter 
      (as per the recommendation), there is no need to install the locales now. 
      The appropriate locales will be installed in the next chapter. To install 
      the Glibc locales anyway, use instructions from <xref 
      linkend="ch-system-glibc" role="."/></para>
      <para>Glibcのテストを成功させるためにはロケールデータをインストールする必要があります。
      ロケールデータは、システムユーティリティによって処理・出力される日付・時刻・通貨のフォーマットのような情報をシステムに提供します。
      もしテストツールを(推奨のとおり)この章で実行しない場合、現時点でロケールデータをインストールする必要はありません。
      適切なロケールデータは次の章でインストールされます。
      どうにかしてGlibcのロケールデータをインストールするには、<xref linkend="ch-system-glibc" role="."/>の手順を実行してください。 </para>
    </note>

    <para>Install the package:</para>
    <para>パッケージのインストール：</para>

<screen><userinput remap="install">make install</userinput></screen>

  <caution> 
    <para>At this point, it is imperative to stop and ensure that the basic 
    functions (compiling and linking) of the new toolchain are working as 
    expected. To perform a sanity check, run the following commands:</para>
    <para>ここで、新しいtoolchainの基本的な機能(コンパイルとリンク)が期待通りに動作することを確認する必要があります。
    プログラムの正当性を確認するため、次のコマンドを実行します：</para> 
 
<screen><userinput>echo 'main(){}' &gt; dummy.c
$LFS_TGT-gcc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>
 
    <para>If everything is working correctly, there should be no errors, 
    and the output of the last command will be of the form:</para>
    <para>全てが正常に動作していれば、エラーが出力されず、最後のコマンドの出力は次のようになるはずです：</para>
 
<screen><computeroutput>[Requesting program interpreter: /tools/lib/ld-linux.so.2]</computeroutput></screen> 
 
    <para>Note that <filename class="directory">/tools/lib</filename>, or
    <filename class="directory">/tools/lib64</filename> for 64-bit machines
    appears as the prefix of the dynamic linker.</para>
    <para>64-bit環境では、ダイナミックリンカのプリフィックスとして、<filename class="directory">/tools/lib</filename>または<filename class="directory">/tools/lib64</filename>が出力されます。</para>
 
    <para>If the output is not shown as above or there was no output at all, 
    then something is wrong. Investigate and retrace the steps to find out 
    where the problem is and correct it. This issue must be resolved before 
    continuing on.</para>
    <para>もし、上記のような出力が得られない場合、または全く出力がない場合は、何か異常があります。
    手順を後戻りして詳細に調べて、どこに問題があったのか見つけ出して修正してください。
    この後の手順を続ける前に、問題を修正する必要があります。</para>
 
    <para>Once all is well, clean up the test files:</para>
    <para>全てがうまくいったら、テストで使用したファイルを削除します：</para> 
 
<screen><userinput>rm -v dummy.c a.out</userinput></screen> 
 
  </caution> 
 
  <note><para>Building Binutils in the next section will serve as an additional check that 
  the toolchain has been built properly. If Binutils fails to build, it is an 
  indication that something has gone wrong with the previous Binutils, GCC, or Glibc 
  installations.</para>
  <para>次章のBinutilsのビルドでは、toolchainが正しくビルドされたことをチェックする追加のテストとして役立ちます。
  もしBinutilsのビルドに失敗する場合、BinutilsのPass 1、GCC、またはGlibcのインストールが何かうまくいっていないことを示しています。</para>
  </note> 

  </sect2>

  <sect2 role="content">
    <title/>

    <para>Details on this package are located in
    <xref linkend="contents-glibc" role="."/></para>
    <para>このパッケージの詳細は、<xref linkend="contents-glibc" role="."/>にあります。
    </para>
  </sect2>

</sect1>
